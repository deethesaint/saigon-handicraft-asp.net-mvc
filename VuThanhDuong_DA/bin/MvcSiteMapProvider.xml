<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvcSiteMapProvider</name>
    </assembly>
    <members>
        <member name="T:MvcSiteMapProvider.Builder.AspNetNamedSiteMapProvider">
            <summary>
            Provider for ASP.NET classic SiteMapProvider. Use this class to 
            get the provider configured in the sitemap/providers section of 
            Web.config by name.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.IAspNetSiteMapProvider">
            <summary>
            Contract for ASP.NET classic SiteMapProvider. Implement this
            interface to retrieve the SiteMapProvider by name or other means.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.AspNetSiteMapBuilder">
            <summary>
            AspNetSiteMapBuilder class. Builds a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> tree based on a 
            <see cref="T:System.Web.SiteMapProvider"/> instance.
            </summary>
            <remarks>
            Use this class for interoperability with ASP.NET classic. To get a sitemap instance, you will need
            to configure a Web.sitemap XML file using the ASP.NET classic schema, then configure it for use in the
            sitemap/providers section of the Web.config file. Consult MSDN for information on how to do this.
            
            The sitemap provider can be retrieved from ASP.NET classic for injection into this class using 
            an implementation of IAspNetSiteMapProvider. You may implement this interface to provide custom
            logic for retrieving a provider by name or other means by using 
            System.Web.SiteMap.Providers[providerName] or for the default provider System.Web.SiteMap.Provider.
            
            Attributes and route values are obtained from a protected member variable of the 
            System.Web.SiteMapProvider named _attributes using reflection. You may disable this functionality for 
            performance reasons if the data is not required by setting reflectAttributes and/or reflectRouteValues to false.
            </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ISiteMapBuilder">
            <summary>
            Implement this interface to make a custom implementation that will build a sitemap.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.AspNetSiteMapBuilder.InheritAreaIfNotProvided(System.Web.SiteMapNode,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Inherits the area from the parent node if it is not provided in the current <see cref="T:System.Web.SiteMapNode"/> and the parent node is not null.
            </summary>
            <param name="node">The siteMapNode element.</param>
            <param name="parentNode">The parent node.</param>
            <returns>The value provided by either the siteMapNode or parentNode.Area.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.AspNetSiteMapBuilder.InheritControllerIfNotProvided(System.Web.SiteMapNode,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Inherits the controller from the parent node if it is not provided in the current <see cref="T:System.Web.SiteMapNode"/> and the parent node is not null.
            </summary>
            <param name="node">The siteMapNode element.</param>
            <param name="parentNode">The parent node.</param>
            <returns>The value provided by either the siteMapNode or parentNode.Controller.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.AspNetDefaultSiteMapProvider">
            <summary>
            Provider for ASP.NET classic SiteMapProvider. Use this class to 
            get the default provider configured in the sitemap/providers section of 
            Web.config.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.AspNetSiteMapNodeProvider">
            <summary>
            AspNetSiteMapNodeProvider class. Builds a <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/> list based on a 
            <see cref="T:System.Web.SiteMapProvider"/> instance.
            </summary>
            <remarks>
            Use this class for interoperability with ASP.NET. To get a sitemap instance, you will need
            to configure a Web.sitemap XML file using the ASP.NET classic schema, then configure it for use in the
            sitemap/providers section of the Web.config file. Consult MSDN for information on how to do this.
            
            The sitemap provider can be retrieved from ASP.NET for injection into this class using 
            an implementation of IAspNetSiteMapProvider. You may implement this interface to provide custom
            logic for retrieving a provider by name or other means by using 
            System.Web.SiteMap.Providers[providerName] or for the default provider System.Web.SiteMap.Provider.
            
            We have provided the <see cref="T:MvcSiteMapProvider.Builder.AspNetDefaultSiteMapProvider"/> and 
            <see cref="T:MvcSiteMapProvider.Builder.AspNetNamedSiteMapProvider"/> that you can use as well.
            
            Attributes and route values are obtained from a protected member variable of the 
            System.Web.SiteMapProvider named _attributes using reflection. You may disable this functionality for 
            performance reasons if the data is not required by setting reflectAttributes and/or reflectRouteValues to false.
            </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapNodeProvider">
            <summary>
            Contract for a provider that creates a list of <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/>
            instances that can be processed later and put into a <see cref="T:MvcSiteMapProvider.ISiteMap"/>.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.AspNetSiteMapNodeProvider.InheritAreaIfNotProvided(System.Web.SiteMapNode,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Inherits the area from the parent node if it is not provided in the current <see cref="T:System.Web.SiteMapNode"/> and the parent node is not null.
            </summary>
            <param name="node">The siteMapNode element.</param>
            <param name="parentNode">The parent node.</param>
            <returns>The value provided by either the siteMapNode or parentNode.Area.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.AspNetSiteMapNodeProvider.InheritControllerIfNotProvided(System.Web.SiteMapNode,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Inherits the controller from the parent node if it is not provided in the current <see cref="T:System.Web.SiteMapNode"/> and the parent node is not null.
            </summary>
            <param name="node">The siteMapNode element.</param>
            <param name="parentNode">The parent node.</param>
            <returns>The value provided by either the siteMapNode or parentNode.Controller.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.DynamicNodeBuilder">
            <summary>
            Creates nodes dynamically based on an implemenation of <see cref="T:MvcSiteMapProvider.IDynamicNodeProvider"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.IDynamicNodeBuilder">
            <summary>
            Contract for dynamic node builder.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.DynamicNodeBuilder.BuildDynamicNodesFor(MvcSiteMapProvider.ISiteMap,MvcSiteMapProvider.ISiteMapNode,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Adds the dynamic nodes for node.
            </summary>
            <param name="node">The node.</param>
            <param name="parentNode">The parent node.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.IReservedAttributeNameProvider">
            <summary>
            Contract for reserved attribute name provider for SiteMap nodes.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.IReservedAttributeNameProvider.IsRegularAttribute(System.String)">
            <summary>
            Determines whether the attribute with the supplied name can be added to the 
            <see cref="T:SiteMapNodeProvider.Collections.Specialized.IAttributeDictionary"/>.
            </summary>
            <param name="attributeName">The name of the attribute.</param>
            <returns><c>true</c> if the attribute can be added; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.IReservedAttributeNameProvider.IsRouteAttribute(System.String)">
            <summary>
            Determines whether the route value with the supplied name can be added to the 
            <see cref="T:SiteMapNodeProvider.Collections.Specialized.IRouteValueDictionary"/>.
            </summary>
            <param name="attributeName">The name of the attribute.</param>
            <returns><c>true</c> if the attribute can be added; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ISiteMapHierarchyBuilder">
            <summary>
            Contract for a class that builds a hierarchy of nodes and adds them to the SiteMap.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ISiteMapNodeHelper">
            <summary>
            Contract for a set of services for creating SiteMap nodes, including dynamic nodes.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.CreateNodeKey(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generates a key based on the properties that are passed. The combination of values should be unique.
            </summary>
            <param name="parentKey">The key of the intended parent node.</param>
            <param name="key">The key (if any) of the current node.</param>
            <param name="url">The URL of the current node.</param>
            <param name="title">The title of the current node.</param>
            <param name="area">The area (if any) name of the current node.</param>
            <param name="controller">The controller name of the current node.</param>
            <param name="action">The action method name of the current node.</param>
            <param name="httpMethod">The HTTP method of the current node.</param>
            <param name="clickable">Whether or not the node should be clickable on the UI.</param>
            <returns>A key that applies to the current node.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.CreateNode(System.String,System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/>.
            </summary>
            <param name="key">The key for the node. This cannot be changed.</param>
            <param name="parentKey">The key of the intended parent node.</param>
            <param name="sourceName">A string description of the provider. This value is shown in exception messages related to the node configuration.</param>
            <returns>An <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/> instance.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.CreateNode(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/>.
            </summary>
            <param name="key">The key for the node. This cannot be changed.</param>
            <param name="parentKey">The key of the intended parent node.</param>
            <param name="sourceName">A string description of the provider. This value is shown in exception messages related to the node configuration.</param>
            <param name="implicitResourceKey">The implicit resource key for localization of the node's properties.</param>
            <returns>An <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/> instance.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.CreateDynamicNodes(MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation)">
            <summary>
            Processes the dynamic nodes and builds them into a list of <see cref="T:MvcSiteMapNodeProvider.Builder.ISiteMapNodeToParentRelation"/> instances
            and maps their parent node.
            </summary>
            <param name="node">The node that includes a configured <see cref="T:MvcSiteMapProvider.IDynamicNodeProvider"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`MvcSiteMapNodeProvider.Builder.ISiteMapNodeToParentRelation`"/> instance.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.CreateDynamicNodes(MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation,System.String)">
            <summary>
            Processes the dynamic nodes and builds them into a list of <see cref="T:MvcSiteMapNodeProvider.Builder.ISiteMapNodeToParentRelation"/> instances
            and maps their parent node.
            </summary>
            <param name="node">The node that includes a configured <see cref="T:MvcSiteMapProvider.IDynamicNodeProvider"/>.</param>
            <param name="defaultParentKey">The default parent key to use if the dynamic node doesn't specify one.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`MvcSiteMapNodeProvider.Builder.ISiteMapNodeToParentRelation`"/> instance.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.CreateCultureContext(System.String,System.String)">
            <summary>
            Creates a new culture context object that can be used in a using block 
            to temporarily override the culture and UI culture of the current thread.
            </summary>
            <param name="cultureName">The new culture. Can be any valid .NET culture name.</param>
            <param name="uiCultureName">The new UI culture. Can be any valid .NET culture name.</param>
            <returns>A new culture context.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.CreateCultureContext(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Creates a new culture context object that can be used in a using block 
            to temporarily override the culture and UI culture of the current thread.
            </summary>
            <param name="culture">The new culture.</param>
            <param name="uiCulture">The new UI culture.</param>
            <returns>A new culture context.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.CreateInvariantCultureContext">
            <summary>
            Creates a new culture context object that can be used in a using block 
            to temporarily override the culture and UI culture of the current thread 
            using the invariant culture.
            </summary>
            <returns>A new invariant culture context.</returns>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.ReservedAttributeNames">
            <summary>
            A service that can be used to check whether an attribute name is reserved and whether it should be
            added to the RouteValues and/or Attributes dictionaries.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.SiteMapCacheKey">
            <summary>
            The SiteMapCacheKey for the current SiteMap instance.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.ISiteMapNodeHelper.CultureContext">
            <summary>
            The current culture context. This object keeps track of the original 
            culture and original UI culture of the request so they can be restored if necessary.
            The <see cref="T:ISiteMapNodeProvider"/> is run under the invariant culture.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ISiteMapNodeCreator">
            <summary>
            Contract for a set of services useful for creating SiteMap nodes.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeCreator.CreateSiteMapNode(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/>.
            </summary>
            <param name="key">The key for the node. This cannot be changed.</param>
            <param name="parentKey">The key of the intended parent node.</param>
            <param name="sourceName">A string description of the provider. This value is shown in exception messages related to the node configuration.</param>
            <param name="implicitResourceKey">The implicit resource key for localization of the node's properties.</param>
            <returns>An <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/> instance.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeCreator.CreateDynamicSiteMapNode(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/>.
            </summary>
            <param name="key">The key for the node. This cannot be changed.</param>
            <param name="parentKey">The key of the intended parent node.</param>
            <param name="sourceName">A string description of the provider. This value is shown in exception messages related to the node configuration.</param>
            <param name="implicitResourceKey">The implicit resource key for localization of the node's properties.</param>
            <returns>An <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/> instance.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapNodeCreator.GenerateSiteMapNodeKey(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generates a key based on the properties that are passed. The combination of values should be unique within the sitemap.
            </summary>
            <param name="parentKey">The key of the intended parent node.</param>
            <param name="key">The key (if any) of the current node.</param>
            <param name="url">The URL of the current node.</param>
            <param name="title">The title of the current node.</param>
            <param name="area">The area (if any) name of the current node.</param>
            <param name="controller">The controller name of the current node.</param>
            <param name="action">The action method name of the current node.</param>
            <param name="httpMethod">The HTTP method of the current node.</param>
            <param name="clickable">Whether or not the node should be clickable on the UI.</param>
            <returns>A key that applies to the current node.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ISiteMapNodeHelperFactory">
            <summary>
            Contract for an abstract factory that creates instances of <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeHelper"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation">
            <summary>
            Contract for class that provides a map between a SiteMap node instance and its parent key.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelationFactory">
            <summary>
            Contract for abstract factory that creates new instances of <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ReflectionSiteMapNodeProvider">
            <summary>
            ReflectionSiteMapNodeProvider class. 
            Builds a <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/> list based on a
            set of attributes within an assembly.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ReflectionSiteMapNodeProvider.GetSiteMapNodeFromMvcSiteMapNodeAttribute(MvcSiteMapProvider.IMvcSiteMapNodeAttribute,System.Type,System.Reflection.MethodInfo,MvcSiteMapProvider.Builder.ISiteMapNodeHelper)">
            <summary>
            Gets the site map node from MVC site map node attribute.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="type">The type.</param>
            <param name="methodInfo">The method info.</param>
            <param name="helper">The node helper.</param>
            <returns></returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ReflectionSiteMapNodeProviderFactory">
            <summary>
            Abstract factory to assist with the creation of ReflectionSiteMapNodeProvider for DI containers 
            that don't support injection of a partial list of constructor parameters. Without using this 
            class, DI configuration code for those containers is very brittle.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ReservedAttributeNameProvider">
            <summary>
            Provides information whether a given attribute name is a reserved name or it is
            safe to use the attribute in a SiteMapNode's Attributes or RouteValues dictionaries.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapBuilder">
            <summary>
            The default implementation of SiteMapBuilder. Builds a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> tree
            based on a <see cref="T:MvcSiteMapProvider.ISiteMapNodeProvider"/> and then runs a <see cref="T:MvcSiteMapProvider.Visitor.ISiteMapNodeVisitor"/>
            to optimize the nodes.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapBuilderFactory">
            <summary>
            Abstract factory that creates instances of <see cref="T:MvcSiteMapProvider.Builder.SiteMapBuilder"/>.
            This factory can be used during DI configuration for DI containers that don't support a way to 
            supply partial lists of constructor parameters. This enables us to create the type without tightly
            binding to a specific constructor signature, which makes the DI configuration brittle.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapHierarchyBuilder">
            <summary>
            A service that changes a list of ISiteMapNodeToParentRelation instances into a hierarchy
            by mapping each node to its parent node and adds the hierarchy to the SiteMap.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapNodeHelper">
            <summary>
            A set of services useful for building SiteMap nodes, including dynamic nodes.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapNodeCreator">
            <summary>
            A set of services useful for creating SiteMap nodes.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapNodeHelperFactory">
            <summary>
            Abstract factory that creates instances of <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeHelper"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapNodeToParentRelationFactory">
            <summary>
            Abstract factory that provides instances of SiteMapNodeToParentRelation for mapping 
            node instances to their parent nodes before they are added to the SiteMap.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapNodeToParentRelation">
            <summary>
            Class for tracking the relationship between node instances to their parent nodes 
            before they are added to the SiteMap.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.VisitingSiteMapBuilder">
            <summary>
            Provides a means of optimizing <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> instances before they 
            are placed in the cahce.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.XmlSiteMapNodeProvider">
            <summary>
            XmlSiteMapNodeProvider class. Builds a <see cref="T:MvcSiteMapProvider.Builder.ISiteMapNodeToParentRelation"/> list based on a 
            <see cref="T:MvcSiteMapProvider.Xml.IXmlSource"/> instance.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.XmlSiteMapNodeProvider.ProcessXmlNodes(MvcSiteMapProvider.ISiteMapNode,System.Xml.Linq.XElement,MvcSiteMapProvider.Builder.XmlSiteMapNodeProvider.NodesToProcess,MvcSiteMapProvider.Builder.ISiteMapNodeHelper)">
            <summary>
            Recursively processes our XML document, parsing our siteMapNodes and dynamicNode(s).
            </summary>
            <param name="parentNode">The parent node to process.</param>
            <param name="parentElement">The corresponding parent XML element.</param>
            <param name="processFlags">Flags to indicate which nodes to process.</param>
            <param name="helper">The node helper.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.XmlSiteMapNodeProvider.GetSiteMapNodeFromXmlElement(System.Xml.Linq.XElement,MvcSiteMapProvider.ISiteMapNode,MvcSiteMapProvider.Builder.ISiteMapNodeHelper)">
            <summary>
            Maps an XMLElement from the XML file to an MvcSiteMapNode.
            </summary>
            <param name="node">The element to map.</param>
            <param name="parentNode">The parent ISiteMapNode</param>
            <param name="helper">The node helper.</param>
            <returns>An MvcSiteMapNode which represents the XMLElement.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.XmlSiteMapNodeProvider.InheritAreaIfNotProvided(System.Xml.Linq.XElement,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Inherits the area from the parent node if it is not provided in the current siteMapNode XML element and the parent node is not null.
            </summary>
            <param name="node">The siteMapNode element.</param>
            <param name="parentNode">The parent node.</param>
            <returns>The value provided by either the siteMapNode or parentNode.Area.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.XmlSiteMapNodeProvider.InheritControllerIfNotProvided(System.Xml.Linq.XElement,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Inherits the controller from the parent node if it is not provided in the current siteMapNode XML element and the parent node is not null.
            </summary>
            <param name="node">The siteMapNode element.</param>
            <param name="parentNode">The parent node.</param>
            <returns>The value provided by either the siteMapNode or parentNode.Controller.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.XmlSiteMapNodeProviderFactory">
            <summary>
            Abstract factory to assist with the creation of XmlSiteMapNodeProviderFactory for DI containers 
            that don't support injection of a partial list of constructor parameters. Without using this 
            class, DI configuration code for those containers is very brittle.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.AspNetCacheProvider`1">
            <summary>
            A cache provider that uses the <see cref="T:System.Web.HttpContext.Current.Cache"/> instance to 
            cache items that are added.
            </summary>
            <typeparam name="T">The type of item that will be stored in the cache.</typeparam>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.ICacheProvider`1">
            <summary>
            Contract for cache provider. Implement this interface to provide an alternate cache management
            system.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MvcSiteMapProvider.Caching.AspNetCacheProvider`1.OnItemRemoved(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            This method is called when an item has been removed from the cache.
            </summary>
            <param name="key">Cached item key.</param>
            <param name="item">Cached item.</param>
            <param name="reason">Reason the cached item was removed.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.AspNetCompositeCacheDependency">
            <summary>
            A wrapper class to create a concrete instance of <see cref="T:System.Web.Caching.AggregateCacheDependency"/> without creating
            a dependency on the System.Web library.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.ICacheDependency">
            <summary>
            Contract to provide a caching technology agnostic way of passing a cache dependency.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.AspNetFileCacheDependency">
            <summary>
            A wrapper class to create a concrete instance of <see cref="T:System.Web.Caching.CacheDependency"/> without creating
            a dependency on the System.Web library.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.CacheDetails">
            <summary>
            Container for passing caching instructions around as a group.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.ICacheDetails">
            <summary>
            Contract used to provide caching instructions.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.ICache">
            <summary>
            Contract for a class to provide type-safe access to a cache dictionary.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.IMicroCache`1">
            <summary>
            Contract for micro cache.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.ISiteMapCache">
            <summary>
            Contract to provide caching-technology agnostic access to a specific type of cache.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.ISiteMapCacheKeyGenerator">
            <summary>
            ISiteMapCacheKeyGenerator interface. This interface allows the semantics of when a new sitemap
            is generated vs when the sitemap is stored to be changed. Each unique sitemap key that is generated
            causes a new sitemap to be stored in the cache. This can be used to control how incoming requests 
            map to a specific sitemap.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.ISiteMapCacheKeyToBuilderSetMapper">
            <summary>
            Implement this interface to control which named builder set is used to build 
            a specific sitemap. This can be hard-coded logic, or pulled from a configuration file or database.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.LazyLock">
            <summary>
            A lightweight lazy lock container for managing cache item storage and retrieval.
            </summary>
            <remarks>
            Caching strategy inspired by this post:
            http://www.superstarcoders.com/blogs/posts/micro-caching-in-asp-net.aspx
            </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.MicroCache`1">
            <summary>
            A lightweight cache that ensures thread safety when loading items by using a callback that 
            gets called exactly 1 time.
            </summary>
            <typeparam name="T">The type of object to cache.</typeparam>
            <remarks>
            Caching strategy inspired by this post:
            http://www.superstarcoders.com/blogs/posts/micro-caching-in-asp-net.aspx
            </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.MicroCacheItemRemovedEventArgs`1">
            <summary>
            A specialized <see cref="T:System.EventArgs"/> superclass that provides 
            access to the object instance that was removed from the cache.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.NullCacheDependency">
            <summary>
            An <see cref="T:MvcSiteMapProvider.Caching.ICacheDependency"/> implementation that can be used to indicate
            there are no cache dependencies.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.RuntimeCacheProvider`1">
            <summary>
            A cache provider that uses an <see cref="T:System.Runtime.Caching.ObjectCache"/> instance to 
            cache items that are added.
            </summary>
            <typeparam name="T">The type of item that will be stored in the cache.</typeparam>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.RuntimeCompositeCacheDependency">
            <summary>
            A wrapper class to create an IList of <see cref="T:System.Runtime.Caching.ChangeMonitor"/> without creating
            a dependency on the System.Runtime.Caching library.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.RuntimeFileCacheDependency">
            <summary>
            A wrapper class to create an IList of <see cref="T:System.Runtime.Caching.HostFileChangeMonitor"/> without creating
            a dependency on the System.Runtime.Caching library.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.SiteMapCacheKeyGenerator">
            <summary>
            The default cache key generator. This class generates a unique cache key for each 
            DnsSafeHost.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.SiteMapCacheKeyToBuilderSetMapper">
            <summary>
            The default mapper class that simply maps everything to the default <see cref="T:MvcSiteMapProvider.Builder.ISiteMapBulderSet"/>.
            This class can be inherited to provide mapping logic that gets its data from a configuration file or database. 
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ChangeFrequency">
            <summary>
            Change frequency for the node
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.ChangeFrequency.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.ChangeFrequency.Always">
            <summary>
            Always
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.ChangeFrequency.Never">
            <summary>
            Never
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.ChangeFrequency.Hourly">
            <summary>
            Hourly
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.ChangeFrequency.Daily">
            <summary>
            Daily
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.ChangeFrequency.Weekly">
            <summary>
            Weekly
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.ChangeFrequency.Monthly">
            <summary>
            Monthly
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.ChangeFrequency.Yearly">
            <summary>
            Yearly
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.GenericDictionaryFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:System.Collections.Generic.Dictionary{TKey, TValue}"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.IGenericDictionaryFactory">
            <summary>
            Contract for an abstract factory that creates new instances of <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> 
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.IThreadSafeDictionary`2">
            <summary>
            Thread-safe dictionary contract.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.IThreadSafeDictionary`2.MergeSafe(`0,`1)">
            <summary>
            Merge is similar to the SQL merge or upsert statement.  
            </summary>
            <param name="key">Key to lookup</param>
            <param name="newValue">New Value</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.IThreadSafeDictionary`2.RemoveSafe(`0)">
            <summary>
            This is a blind remove. Prevents the need to check for existence first.
            </summary>
            <param name="key">Key to Remove</param>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.LockableDictionary`2">
            <summary>
            Generic dictionary that is aware of the ISiteMap interface and can be made read-only
            depending on the IsReadOnly property of ISiteMap.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.LockableList`1">
            <summary>
            Generic list that is aware of the ISiteMap interface and can be made read-only
            depending on the IsReadOnly property of ISiteMap.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.LockableList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:LockableList"/>
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.CacheableDictionary`2">
            <summary>
            Generic dictionary that is aware of the request cache and when is in read-only
            mode will automatically switch to a writeable request-cached copy of the original dictionary
            during any write operation.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.CacheableDictionary`2.CachingEnabled">
            <summary>
            Override this property and set it to false to disable all caching operations.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.CacheableDictionary`2.ReadOperationDictionary">
            <summary>
            Gets a dictionary object that can be used to to perform a read operation.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.CacheableDictionary`2.WriteOperationDictionary">
            <summary>
            Gets a dictionary object that can be used to perform a write operation.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.NameValueCollectionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.ReservedKeyException">
            <summary>
            ReservedKeyException
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.MvcSiteMapException">
            <summary>
            MvcSiteMapException
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.MvcSiteMapException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.MvcSiteMapException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:MvcSiteMapProvider.MvcSiteMapException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.ReservedKeyException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.ReservedKeyException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.ReservedKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary">
            <summary>
            Specialized dictionary for storing metadata about a specific instance of a MvcSiteMapProvider Html Helper.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.CompositeSiteMapNodeProvider">
            <summary>
            Used to chain several <see cref="T:MvcSiteMapProvider.ISiteMapNodeProvider"/> instances in succession. 
            The providers will be processed in the same order as they are specified in the constructor.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.CompositeSiteMapNodeVisibilityProvider">
            <summary>
            Chains together a group of ISiteMapNodeVisibilityProvider instances so that visibility logic 
            for different purposes can be kept in different providers, but still apply to a single node.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapNodeVisibilityProvider">
            <summary>
            ISiteMapNode Visibility Provider contract.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.ISiteMapNodeVisibilityProvider.IsVisible(MvcSiteMapProvider.ISiteMapNode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Determines whether the node is visible.
            </summary>
            <param name="node">The node.</param>
            <param name="sourceMetadata">The source metadata.</param>
            <returns>
            	<c>true</c> if the specified node is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.ISiteMapNodeVisibilityProvider.AppliesTo(System.String)">
            <summary>
            Determines whether the provider instance matches the name
            </summary>
            <param name="providerName">The name of the visibility provider. This can be any string, but for backward compatibility the type name can be used.</param>
            <returns>
            True if the provider name matches.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.DI.Composer">
            <summary>
            This is the default dependency injection composer for the MvcSiteMapProvider that is fired automatically
            using a WebActivatorEx.PostApplicationStartMethodAttribute during application startup.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.DI.ConfigurationSettings">
            <summary>
            These are the default set of configuration settings when using the internal DI container.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.DI.ControllerFactoryDecorator">
            <summary>
            An implementation of <see cref="T:System.Web.Mvc.IControllerFactory"/> that wraps another instance of 
            <see cref="T:System.Web.Mvc.IControllerFactory"/> so they can be used in conjunction with each other.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.DI.DependencyResolverDecorator">
            <summary>
            An implementation of <see cref="T:System.Web.Mvc.IDependencyResolver"/> that wraps another instance of 
            <see cref="T:System.Web.Mvc.IDependencyResolver"/> so they can be used in conjunction with each other.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.DI.ExcludeFromAutoRegistrationAttribute">
            <summary>
            An attribute that can be used to specify not to implicitly register a class for an 
            external DI container even if the class conforms to one of the conventions. This can be 
            useful if the class is meant to be instantiated by a factory or its purpose otherwise 
            requires it to be registered explicitly.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.CultureContext">
            <summary>
            Allows switching the current thread to a new culture in a using block that will automatically 
            return the culture to its previous state upon completion.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.ICultureContext">
            <summary>
            Contract for a class that can track the current culture while changing to
            another culture. Implement Dispose() to change back to the current culture.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.CultureContextFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.Globalization.ICultureContext"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.ICultureContextFactory">
            <summary>
            Contract for an abstract factory that creates new instances of <see cref="T:MvcSiteMapProvider.Globalization.ICultureContext"/> 
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapNodeExtensions">
            <summary>
            Contains extension logic for the ISiteMapNode interface that is not user 
            overridable.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ISortable">
            <summary>
            Contract to specify a sortable entity.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Matching.IUrlKey">
            <summary>
            Contract for a class that can be used as a key for matching relative or absolute URLs.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Matching.IUrlKeyFactory">
            <summary>
            Contract for an abstract factory that creates new instances of 
            <see cref="T:MvcSiteMapProvider.Matching.IUrlKey"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Matching.RequestUrlKey">
            <summary>
            Uses a root relative, application relative, or absolute URL and a host name to create a key 
            that can be used for matching relative or absolute URLs.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Matching.UrlKeyBase">
            <summary>
            An abstract class containing the logic for comparing 2 IUrlKey instances.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Matching.SiteMapNodeUrlKey">
            <summary>
            Uses an <see cref="T:MvcSiteMapProvider.ISiteMapNode"/>  instance to create a key 
            that can be used for matching relative or absolute URLs.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Matching.UrlKeyFactory">
            <summary>
            An abstract factory that creates new instances of 
            <see cref="T:MvcSiteMapProvider.Matching.IUrlKey"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Reflection.AttributeAssemblyProviderFactory">
            <summary>
            Abstract factory that provides a IAttributeAssemblyProvider instance.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Reflection.IAttributeAssemblyProviderFactory">
            <summary>
            Contract for attribute assembly provider factory.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Reflection.ObjectExtensions">
            <summary>
            Extensions to the System.Object data type.
            </summary>
            <remarks>
            Source: http://stackoverflow.com/questions/1565734/is-it-possible-to-set-private-property-via-reflection#answer-1565766
            </remarks>
        </member>
        <member name="M:MvcSiteMapProvider.Reflection.ObjectExtensions.GetPrivatePropertyValue``1(System.Object,System.String)">
            <summary>
            Returns a _private_ Property Value from a given Object. Uses Reflection.
            Throws a ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is located</param>
            <param name="propertyName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Reflection.ObjectExtensions.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
            Returns a private Field Value from a given Object. Uses Reflection.
            Throws a ArgumentOutOfRangeException if the Field is not found.
            </summary>
            <typeparam name="T">Type of the Field</typeparam>
            <param name="obj">Object from where the Field Value is located</param>
            <param name="fieldName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Reflection.PluginInstantiator`1">
            <summary>
            A class that uses reflection to instantiate types using their assembly qualified names.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.DI.SiteMapFactoryContainer">
            <summary>
            A specialized dependency injection container for resolving a <see cref="T:MvcSiteMapProvider.SiteMapFactory"/> instance.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.DI.SiteMapNodeFactoryContainer">
            <summary>
            A specialized dependency injection container for resolving a <see cref="T:MvcSiteMapProvider.SiteMapNodeFactory"/> instance.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Text.StringExtensions.IsValidIdentifier(System.String)">
            <summary>
            Determines if a string matches a valid C# identifier according to the C# language specification (including Unicode support).
            </summary>
            <param name="identifier">The identifier being analyzed.</param>
            <returns><b>true</b> if the identifier is valid, otherwise <b>false</b>.</returns>
            <remarks>Source: https://gist.github.com/LordDawnhunter/5245476 </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.TrimEmptyGroupingNodesVisibilityProvider">
            <summary>
            Removes non-clickable nodes that have no accessible and/or visible children.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapNodeVisibilityProviderBase">
            <summary>
            Base class to make it easier to implement a custom visibility provider.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNodeVisibilityProviderBase.IsVisible(MvcSiteMapProvider.ISiteMapNode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Determines whether the node is visible. Override this member to provide alternate implementations of VisibilityProvider.
            </summary>
            <param name="node">The node.</param>
            <param name="sourceMetadata">The source meta-data.</param>
            <returns>
            	<c>true</c> if the specified node is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNodeVisibilityProviderBase.AppliesTo(System.String)">
            <summary>
            Determines whether the provider instance matches the name
            </summary>
            <param name="providerName">The name of the visibility provider. This can be any string, but for backward compatibility the type name is used.</param>
            <returns>
            <c>true</c> if the provider name matches; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Visitor.NullSiteMapNodeVisitor">
            <summary>
            A visitor class that implements the null object pattern. Use this class when you don't
            want any visitors to run.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Visitor.ISiteMapNodeVisitor">
            <summary>
            Contract for a site map node visitor.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Binding">
            <summary>
            Represents a binding between host name, protocol, and port.
            This class can be used to determine the port when generating a URL by 
            matching the host name and protocol.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.IBinding">
            <summary>
            Contract for a class that represents a binding between host name, protocol, and port.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.BindingFactory">
            <summary>
            An abstract factory that creates new instances of <see cref="T:MvcSiteMapProvider.Web.Binding"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.IBindingFactory">
            <summary>
            Contract for an abstract factory that creates new instances of <see cref="T:MvcSiteMapProvider.Web.IBinding"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.BindingProvider">
            <summary>
            Provides bindings from the IIS server, if running on IIS. 
            </summary>
            <remarks>
            To determine if IIS is used, we are using the SERVER_SOFTWARE server variable.
            Do note that it is possible to overwrite this value so prying eyes cannot see what, 
            web server you are running. If you overwrite the value so that it does not start with 
            Microsoft-IIS, this class will stop functioning.
            
            This class should be configured as a singleton in the DI container, so 
            the settings are only retrieved at application start, rather than on every request.
            </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.Web.IBindingProvider">
            <summary>
            Contract for a provider that creates a list of <see cref="T:MvcSiteMapProvider.Web.IBinding"/>
            instances that can be used to determine port numbers based on host name and protocol.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.BindingProvider.LoadBindings">
            <summary>
            Loads the IIS bindings for the current application, if running on IIS.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Compilation.BuildManagerAdapter">
            <summary>
            Adapter class so test doubles can be injected for <see cref="T:System.Web.Compilation.BuildManager"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Compilation.IBuildManager">
            <summary>
            Contract for wrapper for <see cref="T:System.Web.Compilation.BuildManager"/> class so it can be used as a test double.
            
            Use http://encuestatron.googlecode.com/svn/trunk/src/MVC/test/SystemWebMvcTest/Mvc/Test/MockBuildManager.cs
            for making a mock.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.CompositeBindingProvider">
            <summary>
            Used to chain several <see cref="T:MvcSiteMapProvider.Web.IBindingProvider"/> instances in succession. 
            The providers will be processed in the same order as they are specified in the constructor.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.CustomBindingProvider">
            <summary>
            Class that can be used to explicitly specify binding configuration by passing 
            <see cref="T:MvcSiteMapProvider.Web.IBinding"/> instances into the constructor.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.ControllerBuilderAdapter">
            <summary>
            Adapter class so test doubles can be injected for <see cref="T:System.Web.Mvc.ControllerBuilder"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.ControllerExtensions">
            <summary>
            ControllerExtensions
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerExtensions.GetCurrentSiteMapNode(System.Web.Mvc.ControllerBase)">
            <summary>
            Gets the current site map node.
            </summary>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerExtensions.GetCurrentSiteMapNode(System.Web.Mvc.ControllerBase,MvcSiteMapProvider.ISiteMap)">
            <summary>
            Gets the current site map node.
            </summary>
            <param name="controller">The controller.</param>
            <param name="siteMap">The site map.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerExtensions.GetCurrentSiteMapNodeForChildAction(System.Web.Mvc.ControllerBase)">
            <summary>
            Gets the current site map node for child action.
            </summary>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerExtensions.GetCurrentSiteMapNodeForChildAction(System.Web.Mvc.ControllerBase,MvcSiteMapProvider.ISiteMap)">
            <summary>
            Gets the current site map node for child action.
            </summary>
            <param name="controller">The controller.</param>
            <param name="siteMap">The SiteMap.</param>
            <returns></returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.Filters.GlobalFilterProvider">
            <summary>
            Provides access to the Global filters registered with MVC.
            </summary>
            <remarks>
            Using the built in IFilterProvider directly doesn't work in conjunction with IDependencyResolver because
            doing so makes it impossible to access the filters that are registered via the static method 
            FilterProviders.Providers.Add().
            </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.Filters.IGlobalFilterProvider">
            <summary>
            Contract to access the Global filters registered with MVC.
            </summary>
            <remarks>
            Using the built in IFilterProvider directly doesn't work in conjunction with IDependencyResolver because
            doing so makes it impossible to access the filters that are registered via the static method 
            FilterProviders.Providers.Add().
            </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapCacheReleaseAttribute">
            <summary>
            Releases the cache for the specified SiteMapCacheKey, or default site map for the current request if not supplied.
            Can be used on the CRUD controller action methods to force the sitemap to be rebuilt with the updated data.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapCacheReleaseAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Called by the MVC framework after the action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapCacheReleaseAttribute.SiteMapCacheKey">
            <summary>
            Cache key for the sitemap instance this attribute applies to.
            If not supplied, the default SiteMap instance for this request will be used.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Routing.RouteDataExtensions.GetOptionalString(System.Web.Routing.RouteData,System.String)">
            <summary>
            Retrieves the value with the specified identifier. Unlike GetRequiredString, this 
            method does not throw an exception if the value does not exist or is null.
            </summary>
            <param name="routeData">The route data.</param>
            <param name="valueName">The key of the value to retrieve.</param>
            <returns>The value with the specified key, or an empty string if not found.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Routing.RouteDataExtensions.GetAreaName(System.Web.Routing.RouteData)">
            <summary>
            Retrieves the area name.
            </summary>
            <param name="routeData">The route data.</param>
            <returns>The area name, or an empty string if not found.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Routing.RouteDataExtensions.MergeDataTokens(System.Web.Routing.RouteData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Merges a set of key value pairs with the current DataTokens dictionary. Overwrites any duplicate keys.
            </summary>
            <param name="routeData">The route data.</param>
            <param name="dataTokens">A dictionary of key value pairs to merge.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Routing.RouteDataExtensions.SetMvcCodeRoutingContext(System.Web.Routing.RouteData,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Adds the MvcCodeRouting.RouteContext DataToken necessary for interoperability 
            with the MvcCodeRouting library https://github.com/maxtoroq/MvcCodeRouting
            </summary>
            <param name="routeData">The route data.</param>
            <param name="node">The current site map node.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.SiteMapHttpResponse">
            <summary>
            HttpResponse wrapper.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.SiteMapHttpResponseCache">
            <summary>
            HttpResponseCache wrapper.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.UrlHelperAdapter">
            <summary>
            Adapter for the <see cref="T:System.Web.Mvc.UrlHelper"/> class so a test double can be passed between methods.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.IUrlHelper">
            <summary>
            Contract for <see cref="T:System.Web.Mvc.UrlHelper"/> wrapper class.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Script.Serialization.IJavaScriptSerializer">
            <summary>
            Contract for <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/> wrapper class.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Script.Serialization.IJsonToDictionaryDeserializer">
            <summary>
            Contract for specialized JSON deserializer.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Script.Serialization.JavaScriptSerializerAdapter">
            <summary>
            Adapter for the <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/> class so a test double can be passed between methods.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Script.Serialization.JsonToDictionaryDeserializer">
            <summary>
            Specialized class to deserialize JSON into a <see cref="T:System.Collections.Generic.IDictionary{string, object}"/>. The 
            value is request cached so if the string has been encountered before in the current request it will not be deserialized again.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.SiteMapNodeExtensions">
            <summary>
            Extension methods for getting attribute values from a <see cref="T:System.Web.SiteMapNode"/> instance.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.ISiteMapXmlReservedAttributeNameProvider">
            <summary>
            Contract for reserved XML attribute name provider for SiteMap nodes.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.SiteMapXmlReservedAttributeNameProvider">
            <summary>
            Provides information whether a given XML attribute name is a reserved name or it is
            safe to use the attribute in a SiteMapNode.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.XmlDistinctAttributeAggregator">
            <summary>
            Parses and aggregates the values of a named attribute in an XML source.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.DI.XmlSiteMapResultFactoryContainer">
            <summary>
            A specialized dependency injection container for resolving a <see cref="T:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResultFactory"/> instance.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.FilteredSiteMapNodeVisibilityProvider">
            <summary>
            Filtered SiteMapNode Visibility Provider.
            
            Rules are parsed left-to-right, first match wins. Asterisk can be used to match any control. Exclamation mark can be used to negate a match.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.FilteredSiteMapNodeVisibilityProvider.IsVisible(MvcSiteMapProvider.ISiteMapNode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Determines whether the node is visible.
            </summary>
            <param name="node">The node.</param>
            <param name="sourceMetadata">The source metadata.</param>
            <returns>
            	<c>true</c> if the specified node is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.ExplicitResourceKeyParser">
            <summary>
            AttributeResourceKeyParser class. This class is used to parse resource information from 
            attributes in XML files (or other sources). This information can later be used to lookup localized versions of the text
            to insert in place of the resource string.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.IExplicitResourceKeyParser">
            <summary>
            IExplicitResourceKeyParser interface. Provides a way to insert parsing logic 
            to convert a localization string into its explicit resource keys and values.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.ILocalizationService">
            <summary>
            Provides services to extract meta-keys and to later use the keys to localize text into different cultures. 
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.ILocalizationServiceFactory">
            <summary>
            Contract for an abstract factory that creates new instances of <see cref="T:MvcSiteMapProvider.Globalization.ILocalizationService"/> 
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.IStringLocalizer">
            <summary>
            Contains methods to deal with localization of strings to the current culture.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.LocalizationService">
            <summary>
            Provides services to extract meta-keys and to later use the keys to localize text into different cultures. 
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Globalization.LocalizationService.ExtractExplicitResourceKey(System.String,System.String)">
            <summary>
            Extracts any meta information that is used to lookup the resource key and stores it for later use by the <see cref="M:MvcSiteMapProvider.Globalization.LocalizationService.GetResourceString(System.String,System.String,MvcSiteMapProvider.ISiteMap)"/> method.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns>The new value after the evaluation.</returns>
        </member>
        <member name="P:MvcSiteMapProvider.Globalization.LocalizationService.ResourceKey">
            <summary>
            Gets or sets the implicit resource key (optional).
            </summary>
            <value>The implicit resource key.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.LocalizationServiceFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.Globalization.LocalizationService"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Globalization.StringLocalizer">
            <summary>
            Contains methods to deal with localization of strings to the current culture.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Globalization.StringLocalizer.GetResourceString(System.String,System.String,System.Boolean,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets the localized text for the supplied attributeName.
            </summary>
            <param name="attributeName">The name of the attribute (as if it were in the original XML file).</param>
            <param name="value">The current object's value of the attribute.</param>
            <param name="enableLocalization">True if localization has been enabled, otherwise false.</param>
            <param name="classKey">The resource key from the ISiteMap class.</param>
            <param name="implicitResourceKey">The implicit resource key.</param>
            <param name="explicitResourceKeys">A <see cref="T:System.Collections.Specialized.NameValueCollection"/> containing the explicit resource keys.</param>
            <returns></returns>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.IPreservedRouteParameterCollection">
            <summary>
            Contract of specialized string collection for providing business logic that manages
            the behavior of the preserved route parameters.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IPreservedRouteParameterCollection.AddRange(System.String,System.Char[])">
            <summary>
            Splits a string with the given separator characters and adds each element to the collection.
            </summary>
            <param name="stringToSplit">The string to split.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or <b>null</b>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IPreservedRouteParameterCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds each element of a <see cref="T:System.Collections.Generic.IEnumerable{string}"/> to the collection.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable{string}"/> containing the values to add, or <b>null</b>.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.IRoleCollection">
            <summary>
            Contract of specialized string collection for providing business logic that manages
            the behavior of the roles.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRoleCollection.AddRange(System.String,System.Char[])">
            <summary>
            Splits a string with the given separator characters and adds each element to the collection.
            </summary>
            <param name="stringToSplit">The string to split.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or <b>null</b>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRoleCollection.AddRange(System.Collections.IList)">
            <summary>
            Adds each element of a <see cref="T:System.Collections.IList"/> to the collection.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.IList"/> containing the values to add, or <b>null</b>.</param>
        </member>
        <member name="T:MvcSiteMapProvider.DI.SiteMapLoaderContainer">
            <summary>
            A specialized dependency injection container for resolving a <see cref="T:MvcSiteMapProvider.Loader.SiteMapLoader"/> instance.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapNodePluginProvider">
            <summary>
            Contract for plugins used by <see cref="T:MvcSiteMapProvider.SiteMapNode"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapPluginProvider">
            <summary>
            Contract for plugins used by <see cref="T:MvcSiteMapProvider.SiteMap"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapPluginProviderFactory">
            <summary>
            Contract for an abstract factory that can be used to create new instances of 
            <see cref="T:MvcSiteMapProvider.ISiteMapPluginProvider"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Loader.ISiteMapCreator">
            <summary>
            Contract for a creator implementation to build a specific <see cref="T:MvcSiteMapProvider.ISiteMap"/> instance.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Loader.ISiteMapLoader">
            <summary>
            Contract for a loader implementation to get a specific <see cref="T:MvcSiteMapProvider.ISiteMap"/> instance.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Loader.SiteMapCreator">
            <summary>
            Builds a specific <see cref="T:MvcSiteMapProvider.ISiteMap"/> instance based on a cache key.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Loader.SiteMapLoader">
            <summary>
            <see cref="T:MvcSiteMapProvider.Loader.SiteMapLoader"/> is responsible for loading or unloading
            an <see cref="T:MvcSitemapProvider.ISiteMap"/> instance from the cache.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.PreservedRouteParameterCollection">
            <summary>
            Specialized string collection for providing business logic that manages
            the behavior of the preserved route parameters.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.PreservedRouteParameterCollection.AddRange(System.String,System.Char[])">
            <summary>
            Splits a string with the given separator characters and adds each element to the collection.
            </summary>
            <param name="stringToSplit">The string to split.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or <b>null</b>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.PreservedRouteParameterCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds each element of a <see cref="T:System.Collections.Generic.IEnumerable{string}"/> to the collection.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable{string}"/> containing the values to add, or <b>null</b>.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.IMetaRobotsValueCollection">
            <summary>
            Contract of specialized string collection for providing business logic that manages
            the behavior of the meta robots content attribute.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IMetaRobotsValueCollection.AddRange(System.String,System.Char[])">
            <summary>
            Splits a string with the given separator characters and adds each element to the collection as a new value. Duplicates will be ignored.
            </summary>
            <param name="stringToSplit">The string to split.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or <b>null</b>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IMetaRobotsValueCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds each element of a <see cref="T:System.Collections.Generic.IEnumerable{string}"/> to the collection as a new meta robots value. Duplicates will be ignored.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable{string}"/> containing the values to add, or <b>null</b>.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.MetaRobotsValueCollection">
            <summary>
            A specialized collection for managing the business rules for handling the
            allowed values in the meta robots tag.
            </summary>
            <remarks>
            <list type="bullet">
                <listheader>
                    <term>Allowed Values</term>
                </listheader>
                <item>
                    <term>index</term>
                    <description>
                        Allow search engine robots to index the page, you don't have to add this to your pages, as it's the default.
                        May not be used in conjunction with noindex or none.
                    </description>
                </item>
                <item>
                    <term>noindex</term>
                    <description>
                        Disallow search engines from showing this page in their results.
                        May not be used in conjunction with index or none.
                    </description>
                </item>
                <item>
                    <term>follow</term>
                    <description>
                        Tells the search engine robots to follow the links on the page, whether it can index it or not.
                        May not be used in conjunction with nofollow or none.
                    </description>
                </item>
                <item>
                    <term>nofollow</term>
                    <description>
                        Tells the search engine robots to not follow any links on the page at all.
                        May not be used in conjunction with follow or none.
                    </description>
                </item>
                <item>
                    <term>none</term>
                    <description>
                        This is a shortcut for 'noindex,nofollow', or basically saying to search engines: don't do anything with this page at all.
                        May not be used in conjunction with index, noindex, follow, or nofollow.
                    </description>
                </item>
                <item>
                    <term>noarchive</term>
                    <description>
                        Prevents the search engines from showing a cached copy of this page.
                    </description>
                </item>
                <item>
                    <term>nocache</term>
                    <description>
                        Same as noarchive, but only used by MSN/Live/Bing.
                    </description>
                </item>
                <item>
                    <term>nosnippet</term>
                    <description>
                        Prevents the search engines from showing a snippet of this page in the search results and prevents them from caching the page.
                    </description>
                </item>
                <item>
                    <term>nopreview</term>
                    <description>
                        Same as nosnippet, but only used by Bing.
                    </description>
                </item>
                <item>
                    <term>noodp</term>
                    <description>
                        Blocks search engines from using the description for this page in DMOZ (aka ODP) as the snippet for your page in the search results.
                    </description>
                </item>
                <item>
                    <term>noydir</term>
                    <description>
                        Blocks Yahoo! from using the description for this page in the Yahoo! directory as the snippet for your page in the search results. 
                        No other search engines use the Yahoo! directory for this purpose, so they don’t support the tag.
                    </description>
                </item>
            </list>
            Any use of a single value more than one time will be ignored.
            </remarks>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.MetaRobotsValueCollection.AddRange(System.String,System.Char[])">
            <summary>
            Splits a string with the given separator characters and adds each element to the collection as a new meta robots value. Duplicates will be ignored.
            </summary>
            <param name="stringToSplit">The meta robots string to split.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or <b>null</b>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.MetaRobotsValueCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds each element of a <see cref="T:System.Collections.Generic.IEnumerable{string}"/> to the collection as a new meta robots value. Duplicates will be ignored.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable{string}"/> containing the values to add, or <b>null</b>.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.RoleCollection">
            <summary>
            Specialized string collection for providing business logic that manages
            the behavior of the roles.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RoleCollection.AddRange(System.String,System.Char[])">
            <summary>
            Splits a string with the given separator characters and adds each element to the collection.
            </summary>
            <param name="stringToSplit">The string to split.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or <b>null</b>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RoleCollection.AddRange(System.Collections.IList)">
            <summary>
            Adds each element of a <see cref="T:System.Collections.IList"/> to the collection.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.IList"/> containing the values to add, or <b>null</b>.</param>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapChildStateFactory">
            <summary>
            Contract for an abstract factory that creates new instances of types required by the <see cref="T:MvcSiteMapProvider.SiteMap"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapChildStateFactory">
            <summary>
            Abstract factory for creating new instances of types required by the <see cref="T:MvcSiteMapProvider.SiteMap"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapNodePluginProvider">
            <summary>
            Provider for plugins used by <see cref="T:MvcSiteMapProvider.SiteMapNode"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapPluginProvider">
            <summary>
            Provider for plug-ins used by <see cref="T:MvcSiteMapProvider.SiteMap"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapPluginProviderFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.SiteMapPluginProvider"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Visitor.CompositeSiteMapNodeVisitor">
            <summary>
            Used to chain several <see cref="T:MvcSiteMapProvider.Visitor.ISiteMapNodeVisitor"/> instances in succession. 
            The visitors will be processed in the same order as they are specified in the constructor.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Visitor.UrlResolvingSiteMapNodeVisitor">
            <summary>
            Specialized <see cref="T:MvcSiteMapProvider.Visitor.ISiteMapNodeVisitor"/> class for resolving URLs
            during the build stage so they are aleady resolved before caching.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Compilation.BuildManagerAdaptor">
            <summary>
            Adaptor class so test doubles can be injected for <see cref="T:System.Web.Compilation.BuildManager"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.CanonicalHelper">
            <summary>
            MvcSiteMapHtmlHelper extension methods
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.CanonicalHelper.CanonicalTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper)">
            <summary>
            Gets the CanonicalUrl of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <returns>The CanonicalUrl of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.CanonicalHelper.CanonicalTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Object)">
            <summary>
            Gets the CanonicalUrl of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The CanonicalUrl of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.CanonicalHelper.CanonicalTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets the CanonicalUrl of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The CanonicalUrl of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.CanonicalHelper.CanonicalTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String)">
            <summary>
            Gets the CanonicalUrl of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <returns>The CanonicalUrl of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.CanonicalHelper.CanonicalTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Object)">
            <summary>
            Gets the CanonicalUrl of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The CanonicalUrl of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.CanonicalHelper.CanonicalTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets the CanonicalUrl of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The CanonicalUrl of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.CanonicalHelper.BuildModel(MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Builds the model.
            </summary>
            <param name="startingNode">The starting node.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.CanonicalHelper.GetSourceMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the source meta data for the current context.
            </summary>
            <param name="sourceMetadata">User-defined metadata.</param>
            <returns>SourceMetadataDictionary for the current request.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.MetaRobotsHelper">
            <summary>
            MvcSiteMapHtmlHelper extension methods
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MetaRobotsHelper.MetaRobotsTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper)">
            <summary>
            Gets the content attribute value of the meta robots tag for the SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <returns>
            The content attribute value for the meta robots tag of the CurrentNode or the RootNode (if CurrentNode is null)
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MetaRobotsHelper.MetaRobotsTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Object)">
            <summary>
            Gets the content attribute value of the meta robots tag for the SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <returns>
            The content attribute value for the meta robots tag of the CurrentNode or the RootNode (if CurrentNode is null)
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MetaRobotsHelper.MetaRobotsTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets the content attribute value of the meta robots tag for the SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <returns>
            The content attribute value for the meta robots tag of the CurrentNode or the RootNode (if CurrentNode is null)
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MetaRobotsHelper.MetaRobotsTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String)">
            <summary>
            Gets the content attribute value of the meta robots tag for the SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <returns>
            The content attribute value for the meta robots tag of the CurrentNode or the RootNode (if CurrentNode is null)
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MetaRobotsHelper.MetaRobotsTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Object)">
            <summary>
            Gets the content attribute value of the meta robots tag for the SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <returns>
            The content attribute value for the meta robots tag of the CurrentNode or the RootNode (if CurrentNode is null)
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MetaRobotsHelper.MetaRobotsTag(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets the content attribute value of the meta robots tag for the SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <returns>
            The content attribute value for the meta robots tag of the CurrentNode or the RootNode (if CurrentNode is null)
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MetaRobotsHelper.BuildModel(MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Builds the model.
            </summary>
            <param name="startingNode">The starting node.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MetaRobotsHelper.GetSourceMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the source meta data for the current context.
            </summary>
            <param name="sourceMetadata">User-defined metadata.</param>
            <returns>SourceMetadataDictionary for the current request.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.Models.CanonicalHelperModel">
            <summary>
            CanonicalHelperModel
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.CanonicalHelperModel.CurrentNode">
            <summary>
            Gets or sets the current node.
            </summary>
            <value>The current node.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.Models.MetaRobotsHelperModel">
            <summary>
            MetaRobotsHelperModel
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.MetaRobotsHelperModel.CurrentNode">
            <summary>
            Gets or sets the current node.
            </summary>
            <value>The current node.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.ActionMethodParameterResolverFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.Web.Mvc.ActionMethodParameterResolver"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.IActionMethodParameterResolverFactory">
            <summary>
            Contract for abstract factory that can provide instances of <see cref="T:MvcSiteMapProvder.Web.Mvc.IActionMethodParameterResolver"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.ControllerBuilderAdaptor">
            <summary>
            Adaptor class so test doubles can be injected for <see cref="T:System.Web.Mvc.ControllerBuilder"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.ControllerDescriptorFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:System.Web.Mvc.ControllerDescriptor"/>
            at runtime. Will return a <see cref="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor"/> for asynchronous
            controller types.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.IControllerDescriptorFactory">
            <summary>
            Contract for abstract factory that can provide instances of <see cref="T:System.Web.Mvc.ControllerDescriptor"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolverFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.IControllerTypeResolverFactory">
            <summary>
            Contract for abstract factory that can provide instances of <see cref="T:MvcSiteMapProvder.Web.Mvc.IControllerTypeResolver"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.IMvcResolver">
            <summary>
            Contract for facade service that resolves MVC dependencies.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.IMvcResolverFactory">
            <summary>
            Contract for abstract factory that can provide instances of <see cref="T:System.Web.Mvc.IMvcResolver"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.AmbiguousControllerException">
            <summary>
            AmbiguousControllerException
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.AmbiguousControllerException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.AmbiguousControllerException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.AmbiguousControllerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.ActionMethodParameterResolver">
            <summary>
            ActionMethodParameterResolver class
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.IActionMethodParameterResolver">
            <summary>
            IActionMethodParameterResolver contract
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.IActionMethodParameterResolver.ResolveActionMethodParameters(MvcSiteMapProvider.Web.Mvc.IControllerTypeResolver,System.String,System.String,System.String)">
            <summary>
            Resolves the action method parameters.
            </summary>
            <param name="controllerTypeResolver">The controller type resolver.</param>
            <param name="areaName">Name of the area.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionMethodName">Name of the action method.</param>
            <returns>
            A action method parameters represented as a <see cref="T:System.String"/> instance 
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ActionMethodParameterResolver.#ctor(MvcSiteMapProvider.Web.Mvc.IControllerDescriptorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Mvc.ActionMethodParameterResolver"/> class.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ActionMethodParameterResolver.ResolveActionMethodParameters(MvcSiteMapProvider.Web.Mvc.IControllerTypeResolver,System.String,System.String,System.String)">
            <summary>
            Resolves the action method parameters.
            </summary>
            <param name="controllerTypeResolver">The controller type resolver.</param>
            <param name="areaName">Name of the area.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionMethodName">Name of the action method.</param>
            <returns>
            A action method parameters represented as a <see cref="T:System.String"/> instance
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.ActionMethodParameterResolver.Cache">
            <summary>
            Gets or sets the cache.
            </summary>
            <value>The cache.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver">
            <summary>
            ControllerTypeResolver class
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.IControllerTypeResolver">
            <summary>
            IControllerTypeResolver contract
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.IControllerTypeResolver.ResolveControllerType(System.String,System.String)">
            <summary>
            Resolves the type of the controller.
            </summary>
            <param name="areaName">Name of the area.</param>
            <param name="controllerName">Name of the controller.</param>
            <returns>Controller type</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver.ResolveControllerType(System.String,System.String)">
            <summary>
            Resolves the type of the controller.
            </summary>
            <param name="areaName">Name of the area.</param>
            <param name="controllerName">Name of the controller.</param>
            <returns>Controller type</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver.FindNamespacesForArea(System.String,System.Web.Routing.RouteCollection)">
            <summary>
            Finds the namespaces for area.
            </summary>
            <param name="area">The area.</param>
            <param name="routes">The routes.</param>
            <returns>
            A namespaces for area represented as a <see cref="T:System.String"/> instance
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver.InitAssemblyCache">
            <summary>
            Inits the assembly cache.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver.GetListOfControllerTypes">
            <summary>
            Gets the list of controller types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver.IsNamespaceMatch(System.String,System.String)">
            <summary>
            Determines whether namespace matches the specified requested namespace.
            </summary>
            <param name="requestedNamespace">The requested namespace.</param>
            <param name="targetNamespace">The target namespace.</param>
            <returns>
            	<c>true</c> if is namespace matches the specified requested namespace; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver.GetControllerTypeWithinNamespaces(System.String,System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Gets the controller type within namespaces.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="namespaces">The namespaces.</param>
            <returns>
            A controller type within namespaces represented as a <see cref="T:System.Type"/> instance 
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver.Cache">
            <summary>
            Gets or sets the cache.
            </summary>
            <value>The cache.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.ControllerTypeResolver.AssemblyCache">
            <summary>
            Gets or sets the assembly cache.
            </summary>
            <value>The assembly cache.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.Filters.AttributeTarget">
            <summary>
            AttributeTarget
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.Web.Mvc.Filters.AttributeTarget.CurrentNode">
            <summary>
            CurrentNode
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.Web.Mvc.Filters.AttributeTarget.ParentNode">
            <summary>
            ParentNode
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapPreserveRouteDataAttribute">
            <summary>
            Apply this attribute to keep route data when rendering the sitemap (e.g. breadcrumbs).
            Note: Do NOT use this in conjunction with dynamic node providers!
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapPreserveRouteDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapPreserveRouteDataAttribute"/> class.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapPreserveRouteDataAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Ensures all routedata elements are included on the node whenever the mvc action is invoked.
            This allows the MVC site map to have route values preserved for breadcrumb trails.
            </summary>
            <param name="filterContext">The current filter context.</param>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapPreserveRouteDataAttribute.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapTitleAttribute">
            <summary>
            SiteMapTitle attribute
            Can be used for overriding sitemap title on an action method on a per request basis.
            Credits go to Kenny Eliasson - http://mvcsitemap.codeplex.com/Thread/View.aspx?ThreadId=67056
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapTitleAttribute.PropertyName">
            <summary>
            Property name of ViewData to look in
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapTitleAttribute.#ctor(System.String)">
            <summary>
            Creates a new SiteMapTitleAttribute instance.
            </summary>
            <param name="propertyName">Property in ViewData used as the SiteMap.CurrentNode.Title</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapTitleAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Called by the MVC framework after the action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapTitleAttribute.ResolveTarget(System.Object,System.String)">
            <summary>
            Resolve target
            </summary>
            <param name="target">Target object</param>
            <param name="expression">Target expression</param>
            <returns>
            A target represented as a <see cref="T:System.Object"/> instance 
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapTitleAttribute.SiteMapCacheKey">
            <summary>
            Cache key for the sitemap instance this attribute applies to.
            If not supplied, the default SiteMap instance for this request will be used.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.Filters.SiteMapTitleAttribute.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.IXmlSiteMapResultFactory">
            <summary>
            IXmlSiteMapResultFactory interface
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.MvcContextFactory">
            <summary>
            An abstract factory that can be used to create new instances of MVC
            context-related instances at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.IMvcContextFactory">
            <summary>
            Contract for an abstract factory that provides context-related instances at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.MvcResolver">
            <summary>
            Facade service that resolves MVC dependencies.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.MvcResolverFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.Web.Mvc.MvcResolver"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.UrlHelperAdaptor">
            <summary>
            Adapter for the <see cref="T:System.Web.Mvc.UrlHelper"/> class so a test double can be passed between methods.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResultFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.UrlResolver.SiteMapNodeUrlResolverBase">
            <summary>
            Base class to make it easier to implement a custom Url Resolver.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.UrlResolver.ISiteMapNodeUrlResolver">
            <summary>
            SiteMapNode URL resolver contract.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlResolver.ISiteMapNodeUrlResolver.ResolveUrl(MvcSiteMapProvider.ISiteMapNode,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves the URL.
            </summary>
            <param name="node">The site map node.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="routeValues">The route values.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlResolver.ISiteMapNodeUrlResolver.AppliesTo(System.String)">
            <summary>
            Determines whether the provider instance matches the name
            </summary>
            <param name="providerName">The name of the dynamic node provider. This can be any string, but for backward compatibility the type name can be used.</param>
            <returns>
            True if the provider name matches.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlResolver.SiteMapNodeUrlResolverBase.ResolveUrl(MvcSiteMapProvider.ISiteMapNode,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves the URL. Override this member to provide alternate implementations of UrlResolver.
            </summary>
            <param name="node">The site map node.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="routeValues">The route values.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlResolver.SiteMapNodeUrlResolverBase.AppliesTo(System.String)">
            <summary>
            Determines whether the provider instance matches the name
            </summary>
            <param name="providerName">The name of the URL resolver. This can be any string, but for backward compatibility the type name is used.</param>
            <returns>
            <c>true</c> if the provider name matches; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Reflection.TypeExtensions">
            <summary>
            Extensions to the Type type.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.IRequestCache">
            <summary>
            Contract for a class to provide type-safe access to a request-level cache.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Caching.RequestCache">
            <summary>
            Provides type-safe access to <see cref="P:System.Web.HttpContext.Items"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.AttributeDictionaryFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionaryFactory">
            <summary>
            Contract for an abstract factory that creates new instances of <see cref="T:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary"/> 
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapBuilderSetStrategy">
            <summary>
            Tracks all of the registered instances of <see cref="T:MvcSiteMapProvider.Builder.ISiteMapBuilderSet"/> and 
            allows the caller to get a specific named instance of this interface at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ISiteMapBuilderSetStrategy">
            <summary>
            Contract to provide a concrete implementation that tracks all of the registered instances of 
            <see cref="T:MvcSiteMapProvider.Builder.ISiteMapBuilderSet"/> and allows the caller to get a specific 
            named instance of this interface at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.CompositeSiteMapBuilder">
            <summary>
            Used to chain several <see cref="T:MvcSiteMapProvider.Builder.ISiteMapBuilder"/> instances in succession. 
            The builders will be processed in the same order as they are specified in the constructor.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.DynamicSiteMapNodeBuilder">
            <summary>
            Creates nodes with a map to their parent node dynamically based on an implementation of <see cref="T:MvcSiteMapProvider.IDynamicNodeProvider"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.IDynamicSiteMapNodeBuilder">
            <summary>
            Contract for dynamic node parent map builder.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.DynamicSiteMapNodeBuilder.BuildDynamicNodes(MvcSiteMapProvider.ISiteMapNode,System.String)">
            <summary>
            Gets the dynamic nodes for node.
            </summary>
            <param name="node">The SiteMap node.</param>
            <param name="defaultParentKey">The key of the parent node.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ISiteMapBuilderSet">
            <summary>
            Contract for specifying a named builder set that can be used to build a <see cref="T:MvcSiteMapProvider.ISiteMap"/> for 
            a specific type of tenant in a multi-tenant application that contains more than one site structure. These named builder sets
            can then be mapped to a request using instances of <see cref="T:MvcSiteMapProvider.Caching.ISiteMapCacheKeyGenerator"/> and 
            <see cref="T:MvcSiteMapProvider.Caching.ISiteMapCacheKeyToBuilderSetMapper"/>.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ISiteMapBuilderSet.AppliesTo(System.String)">
            <summary>
            Determines whether the provider instance matches the name
            </summary>
            <param name="builderSetName">The name of the builder set.</param>
            <returns>
            True if the builder set name matches.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.MvcSiteMapNodeAttributeDefinitionForAction">
            <summary>
            MvcSiteMapNodeAttributeDefinition for Action
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.IMvcSiteMapNodeAttributeDefinition">
            <summary>
            MvcSiteMapNodeAttribute Definition
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.IMvcSiteMapNodeAttributeDefinition.SiteMapNodeAttribute">
            <summary>
            Gets or sets the site map node attribute.
            </summary>
            <value>The site map node attribute.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.MvcSiteMapNodeAttributeDefinitionForAction.SiteMapNodeAttribute">
            <summary>
            Gets or sets the site map node attribute.
            </summary>
            <value>The site map node attribute.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.MvcSiteMapNodeAttributeDefinitionForAction.ControllerType">
            <summary>
            Gets or sets the type of the controller.
            </summary>
            <value>The type of the controller.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.MvcSiteMapNodeAttributeDefinitionForAction.ActionMethodInfo">
            <summary>
            Gets or sets the action method info.
            </summary>
            <value>The action method info.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.MvcSiteMapNodeAttributeDefinitionForController">
            <summary>
            MvcSiteMapNodeAttributeDefinition for Controller
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.MvcSiteMapNodeAttributeDefinitionForController.SiteMapNodeAttribute">
            <summary>
            Gets or sets the site map node attribute.
            </summary>
            <value>The site map node attribute.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.MvcSiteMapNodeAttributeDefinitionForController.ControllerType">
            <summary>
            Gets or sets the type of the controller.
            </summary>
            <value>The type of the controller.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2">
            <summary>
            Thread-safe dictionary implementation.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.RemoveSafe(`0)">
            <summary>
            This is a blind remove. Prevents the need to check for existence first.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.MergeSafe(`0,`1)">
            <summary>
            Merge does a blind remove, and then add.  Basically a blind Upsert.  
            </summary>
            <param name="key">Key to lookup</param>
            <param name="newValue">New Value</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the dictionary contains the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.ThreadSafeDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Locks">
            <summary>
            Locks class
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Locks.GetReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the read lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Locks.GetReadOnlyLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the read only lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Locks.GetWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the write lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Locks.ReleaseReadOnlyLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Releases the read only lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Locks.ReleaseReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Releases the read lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Locks.ReleaseWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Releases the write lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Locks.ReleaseLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Releases the lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Locks.GetLockInstance">
            <summary>
            Gets the lock instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Locks.GetLockInstance(System.Threading.LockRecursionPolicy)">
            <summary>
            Gets the lock instance.
            </summary>
            <param name="recursionPolicy">The recursion policy.</param>
            <returns></returns>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.BaseLock">
            <summary>
            Base lock
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.Collections.BaseLock._Locks">
            <summary>
            Locks
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.BaseLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Collections.BaseLock"/> class.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.BaseLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.ReadLock">
            <summary>
            Read lock
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Collections.ReadLock"/> class.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ReadLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.ReadOnlyLock">
            <summary>
            Readonly lock
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ReadOnlyLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Collections.ReadOnlyLock"/> class.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.ReadOnlyLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.WriteLock">
            <summary>
            Write lock
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Collections.WriteLock"/> class.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.WriteLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Resources.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.AmbiguousControllerFoundMultipleControllers">
            <summary>
              Looks up a localized string similar to Ambiguous controller. Found multiple controller types for &apos;{0}Controller&apos;.  The types that matched are: {1}Consider narrowing the places to search by adding your controller namespaces to ControllerBuilder.Current.DefaultNamespaces or exluding namespaces by adding them to the areaNamespacesToIgnore parameter of ControllerTypeResolverFactory..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.AttributeKeyReserved">
             <summary>
               Looks up a localized string similar to The node with key &apos;{0}&apos; may not add an attribute with the key &apos;{1}&apos; and value &apos;{2}&apos; to the Attributes dictionary because the key is a reserved name. Reserved names are keys that are meant for use as a property of the node rather than a dictionary value or may be values that are specified in the &quot;MvcSiteMapProvider_AttributesToIgnore&quot; web.config value or attributesToIgnore parameter of the ReservedAttributeNameProvider constructor.
            
            For example, rather than adding a &quot;url&quot; key to the Attributes dictionary,  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.CannotEnumerateThreadSafeDictionary">
            <summary>
              Looks up a localized string similar to Cannot enumerate a threadsafe dictionary. Instead, enumerate the keys or values collection..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.CannotExitUpTopDirectory">
            <summary>
              Looks up a localized string similar to Cannot use a leading .. to exit above the top directory..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.CollectionReadOnly">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.CopyOperationDoesNotSupportReferenceTypes">
            <summary>
              Looks up a localized string similar to Copy operation does not support reference types. If you need this functionality, override CopyTo() and provide your own implementation..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.DictionaryAlreadyContainsKey">
            <summary>
              Looks up a localized string similar to An item with the same key has already been added..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.InvalidSiteMapElement">
            <summary>
              Looks up a localized string similar to An invalid element was found in the .sitemap XML file. Please check your sitemap file against the MvcSiteMapProvider.xsd schema..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.InvalidVirtualPath">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid virtual path..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.JsonToDictionaryDeserializerJsonInvalid">
             <summary>
               Looks up a localized string similar to The string &apos;{0}&apos; could not be deserialized into a Dictionary&lt;string, object&gt; because it is not a valid JSON representation of a Dictionary&lt;string, object&gt;. Example: @&quot;{{ &quot;&quot;key&quot;&quot;: &quot;&quot;value&quot;&quot;, &quot;&quot;key2&quot;&quot;: 56 }}&quot;.
            
            {1}.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.MetaRobotsValueFollowAmbiguous">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; value for the robots meta tag has already been added for node. &apos;follow&apos; and &apos;nofollow&apos; may not be used at the same time..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.MetaRobotsValueIndexAmbiguous">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; value for the robots meta tag has already been added for node. &apos;index&apos; and &apos;noindex&apos; may not be used at the same time..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.MetaRobotsValueNoneAmbiguous">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; value for the robots meta tag has already been added for node. &apos;none&apos; cannot be used in conjunction with &apos;index&apos;, &apos;noindex&apos;, &apos;follow&apos;, or &apos;nofollow&apos;. You may use &apos;none&apos; to indicate &apos;noindex&apos; and &apos;nofollow&apos; (not recommended), but do not combine it with these values..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.MetaRobotsValueUnrecognized">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not a valid meta robots value..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.MultipleNodesWithIdenticalKey">
            <summary>
              Looks up a localized string similar to Multiple nodes with the same key &apos;{0}&apos; were found. SiteMap requires that sitemap nodes have unique keys..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.MultipleNodesWithIdenticalUrl">
            <summary>
              Looks up a localized string similar to Multiple nodes with the same URL &apos;{0}&apos; were found. SiteMap requires that sitemap nodes have unique URLs..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.NamedBuilderSetNotFound">
            <summary>
              Looks up a localized string similar to The builder set instance named &apos;{0}&apos; was not found. Check your DI configuration to ensure a builder set instance with this name exists..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.NamedDynamicNodeProviderNotFound">
            <summary>
              Looks up a localized string similar to The dynamic node provider instance named &apos;{0}&apos; was not found. Check your DI configuration to ensure a dynamic node provider instance with this name exists and is configured correctly..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.NamedSiteMapNodeVisibilityProviderNotFound">
            <summary>
              Looks up a localized string similar to The visibility provider instance named &apos;{0}&apos; was not found. Check your DI configuration to ensure a visibility provider instance with this name exists and is configured correctly..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.NamedUrlResolverNotFound">
            <summary>
              Looks up a localized string similar to The URL resolver instance named &apos;{0}&apos; was not found. Check your DI configuration to ensure a URL resolver instance with this name exists and is configured correctly..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.NoParentKeyDefined">
            <summary>
              Looks up a localized string similar to Multiple root nodes defined in sitemap with cache key &apos;{0}&apos;. Are you missing a ParentKey definition on the &apos;{1}&apos; controller, &apos;{2}&apos; method?.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.ObjectFieldNotFound">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; was not found in Type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.ObjectPropertyNotFound">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; was not found in Type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.PhysicalPathNotAllowed">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is a physical path, but a virtual path was expected..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.ReflectionSiteMapBuilderNodeCouldNotBeCreated">
             <summary>
               Looks up a localized string similar to A node defined by MvcSiteMapNodeAttribute could not be created. Please check the properties of the node carefully.
            
            SiteMapCacheKey &apos;{0}&apos;
            
            Node Details: 
            
            {1} .
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.ReflectionSiteMapBuilderOrphanedNodes">
             <summary>
               Looks up a localized string similar to Not all nodes defined by MvcSiteMapNodeAttribute could be paired with a parent node. Check your parent keys to ensure that a node with a corresponding key exists in the SiteMap. Note that the match is case sensitive.
            
            SiteMapCacheKey: &apos;{0}&apos;
            
            Orphaned Nodes:
            
            {1}.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.ReflectionSiteMapBuilderRootKeyAmbiguous">
             <summary>
               Looks up a localized string similar to There is more than one MvcSiteMapNodeAttribute declared without a parent key. The ParentKey property must be set for all (or all but 1) MvcSiteMapNodeAttribute in the application.
            
            SiteMapCacheKey: &apos;{0}&apos;
            Key of root nodes without a ParentKey: 
            {1}.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.ReflectionSiteMapBuilderRootKeyAmbiguousAcrossBuilders">
             <summary>
               Looks up a localized string similar to There is an MvcSiteMapNodeAttribute declared without a parent key, but there was also a root node defined using another configuration method. Only 1 root node is allowed per SiteMap.
            
            SiteMapCacheKey: &apos;{0}&apos;
            Key of root node from other SiteMap builder: &apos;{1}&apos;
            Key of root node defined with MvcSiteMapNodeAttribute: &apos;{2}&apos;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.ResourceNotFoundWithClassAndKey">
            <summary>
              Looks up a localized string similar to The resource object with classname &apos;{0}&apos; and key &apos;{1}&apos; was not found..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.RouteValueKeyReserved">
             <summary>
               Looks up a localized string similar to The node with key &apos;{0}&apos; may not add a route value with the key &apos;{1}&apos; and value &apos;{2}&apos; to the RouteValues dictionary because the key is a reserved name. Reserved names are keys that are meant for use internally by MvcSiteMapProvider rather than a dictionary value.
            
            Valid keys may be &quot;area&quot;, &quot;controller&quot;, &quot;action&quot;, and custom parameters that are not the same as property names of ISiteMapNode.
            
            You may suppress this error message by calling an overload of the RouteValues.Add() or RouteValues.AddRange() that [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapBuilderOrphanedNodes">
             <summary>
               Looks up a localized string similar to Not all configured nodes could be paired with a parent node. Check your parent keys to ensure that a node with a corresponding key exists in the SiteMap. Note that the match is case sensitive.
            
            SiteMapCacheKey: &apos;{0}&apos;
            
            Orphaned Nodes:
            
            {1}.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapBuilderRootKeyAmbiguous">
             <summary>
               Looks up a localized string similar to There is more than one node declared without a parent key. The parent key must be set for all but 1 node in the SiteMap. The node with no parent key will be considered the root node. Note that when defining nodes in XML, the XML file must contain the root node.
            
            You can disable XML configuration by setting the MvcSiteMapProvider_EnableSiteMapFile setting to &quot;false&quot;. For an external DI configuration, you can disable XML parsing by removing the XmlSiteMapNodeProvider from the MvcSiteMapProvider DI module.
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapBuilderRootNodeNotDefined">
             <summary>
               Looks up a localized string similar to No node is defined as the root node of the SiteMap. Exactly one node must have a parent key set to an empty string. That node will be assumed to be the root node.
            
            SiteMapCacheKey: &apos;{0}&apos;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapLoaderAlreadySet">
            <summary>
              Looks up a localized string similar to The sitemap loader may only be set in the Application_Start event of Global.asax and must not be set again. Set the &apos;MvcSiteMapProvider_UseExternalDIContainer&apos; in the AppSettings section of the web.config file to &apos;true&apos; if you are using an external dependency injection container..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapLoaderNotInitialized">
             <summary>
               Looks up a localized string similar to The SiteMapLoader has not been initialized. 
            
            Check the &apos;MvcSiteMapProvider_UseExternalDIContainer&apos; setting in the AppSettings section of web.config.
            
            If the setting is set to &apos;false&apos;, you will need to call the MvcSiteMapProvider.DI.Composer.Compose() method at the end of Application_Start in the Global.asax file. Alternatively, if you are using .NET 4.0 or higher you can install the MvcSiteMapProvider.MVCx NuGet package corresponding to your MVC version.
            
            If the setting is set to &apos;true&apos;, you must set [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeActionAndRouteAndURLNotSet">
             <summary>
               Looks up a localized string similar to The node with key &apos;{0}&apos; and title &apos;{1}&apos; has an empty &apos;action&apos;, an emtpy &apos;route&apos;, and an empty &apos;url&apos;, which is not allowed.
            
            The node must have enough information to resolve the URL. This is normally achieved by setting &apos;controller&apos;, &apos;action&apos;, and (optionally) &apos;area&apos; and/or custom parameters on the node. It can also be accomplished by supplying the route name to the &apos;route` attribute/property. Alternatively, set the &apos;url&apos; property to the relative or absolute URL and (optionally) the &apos;protocol&apos; and &apos;hostnam [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeAreaNameInvalid">
             <summary>
               Looks up a localized string similar to The node with key &apos;{0}&apos; and title &apos;{1}&apos; does not have a valid value for Area. The current value is &apos;{2}&apos;. The Area field must be a valid C# identifier or be set to an empty string to indicate a non-area controller.
            
            A C# identifier must start with a Unicode letter, underscore, or ampersand and may be followed by zero or more Unicode letters, digits, or underscores.
            
            Please use the same value that is returned from the AreaName property of your AreaRegistration class..
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeCanonicalValueAlreadySet">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; has already been set. Simultaneous use of both CanonicalUrl and CanonicalKey is not allowed..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeControllerNameInvalid">
             <summary>
               Looks up a localized string similar to The node with key &apos;{0}&apos; and title &apos;{1}&apos; does not have a valid value for Controller. The current value is &apos;{2}&apos;. The Controller field must be a valid C# identifier and not end with the suffix &apos;Controller&apos;. 
            
            A C# identifier must start with a Unicode letter, underscore, or ampersand and may be followed by zero or more Unicode letters, digits, or underscores.
            
            If you are attempting to add an area to the controller field, do note that the &apos;AreaName/ControllerName&apos; syntax is not supported by MvcSiteMapProvid [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeFormatWithParentKey">
            <summary>
              Looks up a localized string similar to ParentKey: &apos;{0}&apos; | Controller: &apos;{1}&apos; | Action: &apos;{2}&apos; | Area: &apos;{3}&apos; | URL: &apos;{4}&apos; | Key: &apos;{5}&apos; | Source: &apos;{6}&apos;.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeHostNameInvalid">
             <summary>
               Looks up a localized string similar to The node with key &apos;{0}&apos; and title &apos;{1}&apos; does not have a valid value for {3}. The current value is &apos;{2}&apos;. The HostName may not contain a &apos;:&apos; character. 
            
            If you need to configure a non-default port number, pass a CustomBindingProvider instance to the IBindingProvider constructor parameter of UrlPath or configure HOST header names in the Bindings section of IIS..
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeHttpMethodInvalid">
             <summary>
               Looks up a localized string similar to The node with key &apos;{0}&apos; and title &apos;{1}&apos; has the value &apos;{2}&apos; for HttpMethod, which is not allowed.
            
            The available values for HttpMethod are:
            
            {3}.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeReadOnly">
            <summary>
              Looks up a localized string similar to SiteMapNode is readonly, property &apos;{0}&apos; cannot be modified..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeSameKeyInRouteValueAndInheritedRouteParameter">
             <summary>
               Looks up a localized string similar to The node with key &apos;{0}&apos; and title &apos;{1}&apos; has &apos;{2}&apos; configured in both RouteValues and InheritedRouteParameters, which is not allowed. 
            
            InheritedRouteParameters copies the route value from the parent node which would overwrite your configured RouteValue in every case. Either remove &apos;{2}&apos; from InheritedRouteParameters or as a configured RouteValue.
            
            Alternatively, if you are configuring the node in XML and intend to use &apos;{2}&apos; as a custom attribute, use the &apos;MvcSiteMapProvider_AttributesToIgnore&apos; configura [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeSameKeyInRouteValueAndPreservedRouteParameter">
             <summary>
               Looks up a localized string similar to The node with key &apos;{0}&apos; and title &apos;{1}&apos; has &apos;{2}&apos; configured in both RouteValues and PreservedRouteParameters, which is not allowed. 
            
            PreservedRouteParameters copies the route value from the current HTTP request which would overwrite your configured RouteValue in every case. Either remove &apos;{2}&apos; from PreservedRouteParameters or as a configured RouteValue.
            
            Alternatively, if you are configuring the node in XML and intend to use &apos;{2}&apos; as a custom attribute, use the &apos;MvcSiteMapProvider_AttributesToIgnore&apos;  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapNodeTitleNotSet">
            <summary>
              Looks up a localized string similar to The node with key &apos;{0}&apos; does not have a &apos;title&apos; set. Title is a required field for every node..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapReadOnly">
            <summary>
              Looks up a localized string similar to SiteMap is readonly, nodes cannot be modified..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.SiteMapRootNodeNotDefined">
            <summary>
              Looks up a localized string similar to The site map builders returned null for root node. Root node defined in SiteMap cannot be null. Please make sure you return a root node for each SiteMapBuilderSet and that a root node is set in your sitemap XML file if you are using one..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.UnknownSiteMap">
            <summary>
              Looks up a localized string similar to Unknown SiteMap: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.VisitingSiteMapBuilderRequiresRootNode">
             <summary>
               Looks up a localized string similar to VisitingSiteMapBuilder requires a root node in order to function.
            
            Make sure your configuration includes a root node by ensuring there is exactly 1 root node in your .sitemap file or ensuring there is exactly 1 node that has no ParentKey configured..
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.XmlFileNotFound">
            <summary>
              Looks up a localized string similar to Xml file &apos;{0}&apos; could not be found. Verify that the path provided is correct..
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.XmlSiteMapBuilderOrphanedNodes">
             <summary>
               Looks up a localized string similar to Not all nodes defined by using a .sitemap XML file could be paired with a parent node. Check your parent keys to ensure that a node with a corresponding key exists in the SiteMap. Note that the match is case sensitive.
            
            Also note that nodes defined using a DynamicNodeProvider that are defined in a .sitemap XML file cannot use MvcSiteMapNodeAttribute nodes (or dynamic nodes from DynamicNodeProviders defined on MvcSiteMapNodeAttribute) as a parent.
            
            SiteMapCacheKey: &apos;{0}&apos;
            
            Orphaned Nodes:
            
            {1}.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.XmlSiteMapBuilderRootKeyNotDefined">
             <summary>
               Looks up a localized string similar to The root node was not found in the .sitemap XML file. If XML configuration is enabled, exactly one root node must be defined in the file.
            
            Alternatively, you can disable XML configuration by setting the MvcSiteMapProvider_EnableSiteMapFile setting to &quot;false&quot;. For an external DI configuration, you can disable XML parsing by removing the XmlSiteMapBuilder from the MvcSiteMapProvider DI module..
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.XmlSiteMapNodeProviderInvalidSiteMapElement">
             <summary>
               Looks up a localized string similar to An invalid element was found in the .sitemap XML file. Please check your sitemap file against the MvcSiteMapProvider.xsd schema.
            
            SiteMapCacheKey: &apos;{0}&apos;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.XmlSiteMapNodeProviderRootNodeNotDefined">
             <summary>
               Looks up a localized string similar to The root node was not found in the .sitemap XML file. If XML configuration is enabled, exactly one root node must be defined in the file. This will be the root node for the entire SiteMap.
            
            Alternatively, you can disable XML configuration by setting the MvcSiteMapProvider_EnableSiteMapFile setting to &quot;false&quot;. For an external DI configuration, you can disable XML parsing by removing the XmlSiteMapNodeProvider from the MvcSiteMapProvider DI module.
            
            SiteMapCacheKey: &apos;{0}&apos;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.XmlSiteMapNodeProviderXmlNotDefined">
             <summary>
               Looks up a localized string similar to There was no XML provided by the IXmlSource (the return value was null). If you are using a custom IXmlSource, please be sure the output matches the XmlSiteMapProvider.xsd schema.
            
            SiteMapCacheKey: &apos;{0}&apos;.
             </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Resources.Messages.XmlValidationFailed">
            <summary>
              Looks up a localized string similar to The file at &apos;{0}&apos; contains XML validation errors. See the inner exception for complete details..
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Security.AuthorizeAttributeAclModule">
            <summary>
            An ACL module that determines whether the current user has access to a given node based on the MVC AuthorizeAttribute.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Security.IAclModule">
            <summary>
            IAclModule contract
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Security.IAclModule.IsAccessibleToUser(MvcSiteMapProvider.ISiteMap,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Determines whether node is accessible to user.
            </summary>
            <param name="siteMap">The site map.</param>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if accessible to user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Security.AuthorizeAttributeAclModule.IsAccessibleToUser(MvcSiteMapProvider.ISiteMap,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Determines whether node is accessible to user.
            </summary>
            <param name="siteMap">The site map.</param>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if accessible to user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Security.CompositeAclModule">
            <summary>
            Used to chain multiple <see cref="T:MvcSiteMapProvider.Security.IAclModule"/> instances in succession. 
            The builders will be processed in the same order as they are specified in the constructor.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Security.CompositeAclModule.IsAccessibleToUser(MvcSiteMapProvider.ISiteMap,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Determines whether node is accessible to user.
            </summary>
            <param name="siteMap">The site map.</param>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if accessible to user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Security.XmlRolesAclModule">
            <summary>
            XmlRolesAclModule class
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Security.XmlRolesAclModule.IsAccessibleToUser(MvcSiteMapProvider.ISiteMap,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Determines whether node is accessible to user.
            </summary>
            <param name="siteMap">The site map.</param>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if accessible to user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.INodeKeyGenerator">
            <summary>
            INodeKeyGenerator contract
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.INodeKeyGenerator.GenerateKey(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generates the key.
            </summary>
            <param name="parentKey">The parent node's key</param>
            <param name="key">The key.</param>
            <param name="url">The URL.</param>
            <param name="title">The title.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="httpMethod">The HTTP method.</param>
            <param name="clickable">if set to <c>true</c> [clickable].</param>
            <returns>
            A key represented as a <see cref="T:System.String"/> instance 
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.NodeKeyGenerator">
            <summary>
            Default NodeKeyGenerator class. This class provides the logic to generate a unique key based on several fields of a given node.
            This key can then be assigned as the unique identifier for the node.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.NodeKeyGenerator.GenerateKey(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generates the key.
            </summary>
            <param name="parentKey">The parent node's key</param>
            <param name="key">The key.</param>
            <param name="url">The URL.</param>
            <param name="title">The title.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="method">The method.</param>
            <param name="clickable">if set to <c>true</c> clickable.</param>
            <returns>
            A key represented as a <see cref="T:System.String"/> instance
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.ReflectionSiteMapBuilder">
            <summary>
            ReflectionSiteMapBuilder class (copied from ReflectionSiteMapSource class). 
            Builds a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> tree based on a
            set of attributes within an assembly.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ReflectionSiteMapBuilder.BuildSiteMap(MvcSiteMapProvider.ISiteMap,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Provides the base data on which the context-aware provider can generate a full tree.
            </summary>
            <param name="siteMap">The siteMap object to populate with the data.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ReflectionSiteMapBuilder.ProcessNodesInAssembly(MvcSiteMapProvider.ISiteMap,System.Reflection.Assembly,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Processes the nodes in assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ReflectionSiteMapBuilder.CreateNodesFromMvcSiteMapNodeAttributeDefinitions(MvcSiteMapProvider.ISiteMap,MvcSiteMapProvider.ISiteMapNode,System.Collections.Generic.IEnumerable{MvcSiteMapProvider.Builder.IMvcSiteMapNodeAttributeDefinition})">
            <summary>
            Creates the nodes from MVC site map node attribute definitions.
            </summary>
            <param name="definitions">The definitions.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.ReflectionSiteMapBuilder.GetSiteMapNodeFromMvcSiteMapNodeAttribute(MvcSiteMapProvider.ISiteMap,MvcSiteMapProvider.IMvcSiteMapNodeAttribute,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Gets the site map node from MVC site map node attribute.
            </summary>
            <param name="siteMap">The site map.</param>
            <param name="attribute">The attribute.</param>
            <param name="type">The type.</param>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="P:MvcSiteMapProvider.Builder.ReflectionSiteMapBuilder.SiteMapCacheKey">
            <summary>
            Gets the cache key for the current request and caches it, since this class should only be called 1 time per request.
            </summary>
            <remarks>
            Fixes #158 - this key should not be generated in the constructor because HttpContext cannot be accessed
            that early in the application life-cycle when run in IIS Integrated mode.
            </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.SiteMapBuilderSet">
            <summary>
            Provides a named set of services that can be used to build a <see cref="T:MvcSiteMapProvider.ISiteMap"/>.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.SiteMapBuilderSet.#ctor(System.String,System.Boolean,System.Boolean,MvcSiteMapProvider.Builder.ISiteMapBuilder,MvcSiteMapProvider.Caching.ICacheDetails)">
            <summary>
            ctor for backward compatibility, 
            visibilityAffectsDescendants parameter defaults to true
            useTitleIfDescriptionNotProvided parameter defaults to true
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.UrlResolver.SiteMapNodeUrlResolver">
            <summary>
            Default SiteMapNode URL resolver.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlResolver.SiteMapNodeUrlResolver.ResolveUrl(MvcSiteMapProvider.ISiteMapNode,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves the URL.
            </summary>
            <param name="node">The MVC site map node.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="routeValues">The route values.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary">
            <summary>
            Contract for the specialized dictionary for dealing with custom site map attributes.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a new element to the dictionary with the specified key and value. If the key exists, the value will be overwritten.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)">
            <summary>
            Adds a new element to the dictionary with the values specified in the KeyValuePair. If the key exists, the value will be overwritten.
            </summary>
            <param name="item">The KeyValuePair object that contains the key and value to add.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the elements from a <see cref="T:System.Collections.Generic.IDictionary{string, object}"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IDictionary{string, object}"/> of items to add.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds the elements from a <see cref="T:System.Collections.Generic.IDictionary{string, object}"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IDictionary{string, object}"/> of items to add.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.AddRange(System.String)">
            <summary>
            Adds the elements from a JSON string representing the attributes. If the key exists, the value will be overwritten.
            </summary>
            <param name="jsonString">A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.AddRange(System.String,System.Boolean)">
            <summary>
            Adds the elements from a JSON string representing the attributes. If the key exists, the value will be overwritten.
            </summary>
            <param name="jsonString">A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.AddRange(System.Xml.Linq.XElement)">
            <summary>
            Adds the elements from a given <see cref="T:System.Xml.Linq.XElement"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="xmlNode">The <see cref="T:System.Xml.Linq.XElement"/> that represents the siteMapNode element in XML.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.AddRange(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Adds the elements from a given <see cref="T:System.Xml.Linq.XElement"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="xmlNode">The <see cref="T:System.Xml.Linq.XElement"/> that represents the siteMapNode element in XML.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.AddRange(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the elements from a given <see cref="T:System.Collections.Specialized.NameValueCollection"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to retrieve the values from.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IAttributeDictionary.AddRange(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Adds the elements from a given <see cref="T:System.Collections.Specialized.NameValueCollection"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to retrieve the values from.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapNodeChildStateFactory">
            <summary>
            Contract for an abstract factory that creates new instances of types required by the <see cref="T:MvcSiteMapProvider.SiteMapNode"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.ISiteMapNodeCollectionFactory">
            <summary>
            Contract for an abstract factory that creates new instances of <see cref="T:MvcSiteMapProvider.ISiteMapNodeCollection"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.LockableSiteMap">
            <summary>
            Provides the means to make the <see cref="T:MvcSiteMapProvider.SiteMap"/> instance read-only so it cannot be 
            inadvertently altered while it is in the cache. 
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMap">
            <summary>
            This class acts as the root of a SiteMap object graph and maintains a map
            between the child <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> nodes.
            </summary>
            <remarks>
            This class was created by extracting the public interfaces of SiteMapProvider, 
            StaticSiteMapProvider, and MvcSiteMapProvider.DefaultSiteMapProvider.
            </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMap">
            <summary>
            Contract for the specialized class that manages the hierarchical relationship between different 
            <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> instances.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.AddNode(MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Adds a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> object to the node collection that is maintained by the site map provider.
            </summary>
            <param name="node">The <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> to add to the node collection maintained by the provider.</param>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.AddNode(MvcSiteMapProvider.ISiteMapNode,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Adds a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> to the collections that are maintained by the site map provider and establishes a 
            parent/child relationship between the <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> objects.
            </summary>
            <param name="node">The <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> to add to the site map provider.</param>
            <param name="parentNode">The <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> under which to add <paramref name="node"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="node"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:MvcSiteMapProvider.SiteMapNode.Url"/> or <see cref="P:MvcSiteMapProvider.SiteMapNode.Key"/> is already registered with 
            the <see cref="T:MvcSiteMapProvider.SiteMap"/>. A site map node must be made up of pages with unique URLs or keys.
            </exception>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.FindSiteMapNode(System.String)">
            <summary>
            Retrieves a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> object that represents the page at the specified URL.
            </summary>
            <param name="rawUrl">A URL that identifies the page for which to retrieve a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/>.</param>
            <returns>A <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> that represents the page identified by rawURL; otherwise, <b>null</b>, 
            if no corresponding <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> is found or if security trimming is enabled and the 
            <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> cannot be returned for the current user.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.FindSiteMapNodeFromCurrentContext">
            <summary>
            Retrieves a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> object that represents the currently requested page using the current <see cref="T:System.Web.HttpContext"/> object.
            </summary>
            <returns>
            A <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> that represents the currently requested page; otherwise, <b>null</b>, 
            if no corresponding <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> can be found in the <see cref="T:MvcSiteMapProvider.SiteMapNode"/> or if the page context is null.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.FindSiteMapNode(System.Web.Mvc.ControllerContext)">
            <summary>
            Finds the site map node.
            </summary>
            <param name="context">The controller context.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.FindSiteMapNodeFromKey(System.String)">
            <summary>
            Retrieves a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> object based on a specified key.
            </summary>
            <param name="key">A lookup key with which a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> instance is created.</param>
            <returns>A <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> that represents the page identified by key; otherwise, <b>null</b>, 
            if no corresponding <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> is found or if security trimming is enabled and the 
            <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> cannot be returned for the current user. The default is null.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.IsAccessibleToUser(MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Retrieves a Boolean value indicating whether the specified <see cref="T:MvcSiteMapProvider.SiteMapNode"/> object can be viewed by the user in the specified context.
            </summary>
            <param name="node">The <see cref="T:MvcSiteMapProvider.SiteMapNode"/> that is requested by the user.</param>
            <returns>
            true if security trimming is enabled and <paramref name="node"/> can be viewed by the user or security trimming is not enabled; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="node"/> is null.
            </exception>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.ResolveControllerType(System.String,System.String)">
            <summary>
            Resolves the controller type based on the current SiteMap instance.
            </summary>
            <remarks>There is 1 instance of controller type resolver per site map.</remarks>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.ResolveActionMethodParameters(System.String,System.String,System.String)">
            <summary>
            Resolves the action method parameters based on the current SiteMap instance.
            </summary>
            <remarks>There is 1 instance of action method parameter resolver per site map.</remarks>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.FindSiteMapNode(System.Web.HttpContextBase)">
            <summary>
            Finds the site map node.
            </summary>
            <param name="httpContext">The context.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMap.FindSiteMapNodeFromMvcRoute(System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Routing.RouteBase)">
            <summary>
            Finds the node that matches the MVC route.
            </summary>
            <param name="values">The values.</param>
            <param name="route">The route.</param>
            <returns>
            A controller action node represented as a <see cref="T:MvcSiteMapProvider.SiteMapNode"/> instance
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.IsReadOnly">
            <summary>
            Gets whether the current sitemap is read-only.
            </summary>
            <value><c>true</c> if the current sitemap is read-only; otherwise <c>false</c>.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.RootNode">
            <summary>
            Gets the root <see cref="T:MvcSiteMapProvider.SiteMapNode"/> object of the site map data that the current provider represents.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.CurrentNode">
            <summary>
            Gets the <see cref="T:MvcSiteMapProvider.SiteMapNode"/> object that represents the currently requested page.
            </summary>
            <returns>A <see cref="T:MvcSiteMapProvider.SiteMapNode"/> that represents the currently requested page; otherwise, 
            null, if the <see cref="T:MvcSiteMapProvider.SiteMapNode"/> is not found or cannot be returned for the current user.</returns>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.EnableLocalization">
            <summary>
            Gets a Boolean value indicating whether localized values of <see cref="T:MvcSiteMapProvider.SiteMapNode">SiteMapNode</see> 
            attributes are returned.
            </summary>
            <remarks>
            The EnableLocalization property is used for the get accessor of the Title and Description properties, as well as additional 
            Attributes properties of a SiteMapNode object.
            </remarks>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.ResourceKey">
            <summary>
            Get or sets the resource key that is used for localizing <see cref="T:MvcSiteMapProvider.SiteMapNode"/> attributes. 
            </summary>
            <remarks>
            The ResourceKey property is used with the GetImplicitResourceString method of the <see cref="T:MvcSiteMapProvider.SiteMapNode"/> class. 
            For the Title and Description properties, as well as any additional attributes that are defined in the Attributes collection of the 
            <see cref="T:MvcSiteMapProvider.SiteMapNode"/> object, the GetImplicitResourceString method takes precedence over the 
            GetExplicitResourceString when the localization is enabled with the EnableLocalization property set to true. 
            </remarks>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.CacheKey">
            <summary>
            Gets a string representing the cache key of the current SiteMap object. This key (which can be though of as the name) can be used
            to retrieve the SiteMap object. It is also used to build request-cache keys so values can persist in the same request across SiteMap builds.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.SecurityTrimmingEnabled">
            <summary>
            Gets a Boolean value indicating whether a site map provider filters site map nodes based on a user's role.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.UseTitleIfDescriptionNotProvided">
            <summary>
            Gets a Boolean value indicating whether the site map nodes should use the value of the Title 
            property for the default if no value for Description is provided.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.VisibilityAffectsDescendants">
            <summary>
            Gets a Boolean value indicating whether the visibility property of the current node
            will affect the descendant nodes.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMap.HttpContext">
            <summary>
            Gets the current HTTP context.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.LockableSiteMapNode">
            <summary>
            Provides the means to make the <see cref="T:MvcSiteMapProvider.SiteMapNode"/> instance read-only so it cannot be 
            inadvertently altered while it is in the cache.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapNode">
            <summary>
            SiteMapNode class. This class represents a node within the SiteMap hierarchy.
            It contains all business logic to maintain the node's internal state.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapNodePositioningBase">
            <summary>
            An abstract base class that contains methods that deal with locating the position of the current node within
            the site map.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapNodeSecurityBase">
            <summary>
            An abstract class that provides business logic for managing security. 
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapNode">
            <summary>
            Contract for the specialized class that manages the state and business logic of each 
            node in the hierarchy.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNodeSecurityBase.IsAccessibleToUser">
            <summary>
            Determines whether the current node is accessible to the current user based on context.
            </summary>
            <value>
            True if the current node is accessible.
            </value>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNodePositioningBase.IsDescendantOf(MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Gets a value indicating whether the current site map node is a child or a direct descendant of the specified node.
            </summary>
            <param name="node">The <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> to check if the current node is a child or descendant of.</param>
            <returns>true if the current node is a child or descendant of the specified node; otherwise, false.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNodePositioningBase.IsInCurrentPath">
            <summary>
            Determines whether the specified node is in current path.
            </summary>
            <returns>
            	<c>true</c> if the specified node is in current path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNodePositioningBase.GetNodeLevel">
            <summary>
            Gets the level of the current SiteMapNode
            </summary>
            <returns>The level of the current SiteMapNode</returns>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.ParentNode">
            <summary>
            Gets the parent node.
            </summary>
            <value>
            The parent node.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.ChildNodes">
            <summary>
            Gets the child nodes.
            </summary>
            <value>
            The child nodes.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.Descendants">
            <summary>
            Gets the descendant nodes.
            </summary>
            <value>
            The descendant nodes.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.Ancestors">
            <summary>
            Gets the ancestor nodes.
            </summary>
            <value>
            The ancestor nodes.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.NextSibling">
            <summary>
            Gets the next sibling in the map relative to this node.
            </summary>
            <value>
            The sibling node.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.PreviousSibling">
            <summary>
            Gets the previous sibling in the map relative to this node.
            </summary>
            <value>
            The sibling node.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.RootNode">
            <summary>
            Gets the root node in the current map.
            </summary>
            <value>
            The root node.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.SiblingNodes">
            <summary>
            Gets the sibling nodes relative to the current node.
            </summary>
            <value>
            The sibling nodes.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.HasChildNodes">
            <summary>
            Gets a value indicating whether the current SiteMapNode has any child nodes.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNodePositioningBase.Order">
            <summary>
            Gets or sets the display sort order for the node relative to its sibling nodes.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.IsVisible(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Determines whether the node is visible.
            </summary>
            <param name="sourceMetadata">The source metadata.</param>
            <returns>
            	<c>true</c> if the specified node is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.GetDynamicNodeCollection">
            <summary>
            Gets the dynamic node collection.
            </summary>
            <returns>A dynamic node collection.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.ResolveUrl">
            <summary>
            Sets the ResolvedUrl using the current Url or Url resolver.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.HasAbsoluteUrl">
            <summary>
            Gets a boolean value that indicates this is an external URL by checking whether it
            looks like an absolute path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.HasExternalUrl(System.Web.HttpContextBase)">
            <summary>
            Gets a boolean value that indicates this is an external URL by checking whether it
            looks like an absolute path and comparing the DnsSafeHost with the passed in context.
            </summary>
            <param name="httpContext">The http context for the current request.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.GetAbsoluteCanonicalUrl">
            <summary>
            Gets the absolute value of the canonical URL, finding the value by 
            <see cref="P:MvcSiteMapProvider.ISiteMapNode.CanonicalKey"/> if necessary.
            </summary>
            <returns>The absolute canonical URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.GetMetaRobotsContentString">
            <summary>
            Gets a string containing the pre-formatted comma delimited list of values that can be inserted into the
            content attribute of the meta robots tag.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.PreserveRouteParameters">
            <summary>
            Sets the preserved route parameters of the current request to the routeValues collection.
            </summary>
            <remarks>
            This method relies on the fact that the route value collection is request cached. The
            values written are for the current request only, after which they will be discarded.
            </remarks>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.GetCaseCorrectedQueryString(System.Web.HttpContextBase)">
            <summary>
            Gets a <see cref="T:System.Collections.Specialized.NameValueCollection"/> containing the query string
            key value pairs for the passed in HTTP context. The casing of the keys corrected to be the same case as the values that are 
            configured either in the <see cref="P:RouteValues"/> dictionary or the <see cref="P:PreservedRouteParameters"/> collection.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection"/> containing the case-corrected 
            key value pairs of the query string.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            Gets the route data associated with the current node.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <returns>The route data associated with the current node.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.MatchesRoute(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Determines whether this node matches the supplied route values.
            </summary>
            <param name="routeValues">An <see cref="T:System.Collections.Generic.IDictionary{string, object}"/> of route values.</param>
            <returns><c>true</c> if the route matches this node's RouteValues collection; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.SiteMapNode.MergeRouteValuesAndNamedQueryStringValues(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.ICollection{System.String},System.Web.HttpContextBase)">
            <summary>
            Makes a copy of the passed in route values and merges in any query string parameters 
            that are configured for the current node. This ensures query string parameters are only 
            taken into consideration for the match.
            </summary>
            <param name="routeValues">The route values from the RouteData object.</param>
            <param name="queryStringKeys">A list of keys of query string values to add to the route values if 
            they exist in the current context.</param>
            <param name="httpContext">The current HTTP context.</param>
            <returns>A merged list of routeValues and query string values. Route values will take precedence 
            over query string values in cases where both are specified.</returns>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.HttpContext">
            <summary>
            Gets the current HTTP context.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.IsDynamic">
            <summary>
            Gets whether the current node was created from a dynamic source.
            </summary>
            <value>True if the current node is dynamic.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.IsReadOnly">
            <summary>
            Gets whether the current node is read-only.
            </summary>
            <value>True if the current node is read-only.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.SiteMap">
            <summary>
            A reference to the root SiteMap object for the current graph.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.HttpMethod">
            <summary>
            Gets or sets the HTTP method (such as GET, POST, or HEAD) to use to determine
            node accessibility.
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.ResourceKey">
            <summary>
            Gets the implicit resource key (optional).
            </summary>
            <value>The implicit resource key.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Title">
            <summary>
            Gets or sets the title (optional).
            </summary>
            <value>The title.</value>
            <remarks>The title can be localized using a resource provider.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Description">
            <summary>
            Gets or sets the description (optional).
            </summary>
            <value>The description.</value>
            <remarks>The description can be localized using a resource provider.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.TargetFrame">
            <summary>
            Gets or sets the target frame (optional).
            </summary>
            <value>The target frame.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.ImageUrl">
            <summary>
            Gets or sets the image URL (optional).
            </summary>
            <value>The image URL.</value>
            <remarks>The image URL can be localized using a resource provider.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.ImageUrlProtocol">
            <summary>
            Gets or sets the image URL protocol, such as http, https (optional).
            If not provided, it will default to the protocol of the current request.
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.ImageUrlHostName">
            <summary>
            Gets or sets the image URL host name, such as www.somewhere.com (optional).
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Attributes">
            <summary>
            Gets the attributes (optional).
            </summary>
            <value>The attributes.</value>
            <remarks>The attributes can be localized using a resource provider.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Roles">
            <summary>
            Gets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.LastModifiedDate">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified date.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.ChangeFrequency">
            <summary>
            Gets or sets the change frequency.
            </summary>
            <value>The change frequency.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.UpdatePriority">
            <summary>
            Gets or sets the update priority.
            </summary>
            <value>The update priority.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.VisibilityProvider">
            <summary>
            Gets or sets the name or the type of the visibility provider.
            This value will be used to select the concrete type of provider to use to determine
            visibility.
            </summary>
            <value>
            The name or type of the visibility provider.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.DynamicNodeProvider">
            <summary>
            Gets or sets the name or type of the Dynamic Node Provider.
            </summary>
            <value>
            The name or type of the Dynamic Node Provider.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.HasDynamicNodeProvider">
            <summary>
            Gets whether the current node has a dynamic node provider.
            </summary>
            <value>
            <c>true</c> if there is a provider; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Clickable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MvcSiteMapProvider.SiteMapNode"/> is clickable.
            </summary>
            <value>
              <c>true</c> if clickable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.UrlResolver">
            <summary>
            Gets or sets the name or type of the URL resolver.
            </summary>
            <value>
            The name or type of the URL resolver.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.UnresolvedUrl">
            <summary>
            The raw URL before being evaluated by any URL resolver.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.ResolvedUrl">
            <summary>
            The resolved url that has been cached, if any.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.CacheResolvedUrl">
            <summary>
            A value indicating to cache the resolved URL. If false, the URL will be 
            resolved every time it is accessed.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.IncludeAmbientValuesInUrl">
            <summary>
            Gets or sets a value indicating whether to include ambient request values 
            (from the RouteValues and/or query string) when resolving URLs.
            </summary>
            <value><b>true</b> to include ambient values (like MVC does); otherwise <b>false</b>.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Protocol">
            <summary>
            Gets or sets the protocol, such as http or https that will 
            be built into the URL.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.HostName">
            <summary>
            Gets or sets the host name that will be built into the URL.
            </summary>
            <value>The host name.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.CanonicalKey">
            <summary>
            Gets or sets the canonical key. The key is used to reference another <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> to get the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalUrl. Only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.CanonicalUrl">
            <summary>
            Gets or sets the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalKey. Only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.CanonicalUrlProtocol">
            <summary>
            Gets or sets the canonical URL protocol, such as http, https (optional).
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.CanonicalUrlHostName">
            <summary>
            Gets or sets the canonical URL host name, such as www.somewhere.com (optional).
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.MetaRobotsValues">
            <summary>
            Gets the robots meta values.
            </summary>
            <value>The robots meta values.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.HasNoIndexAndNoFollow">
            <summary>
            Gets a boolean value indicating whether both the noindex and nofollow values are included in the
            list of robots meta values.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Route">
            <summary>
            Gets or sets the route.
            </summary>
            <value>The route.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.RouteValues">
            <summary>
            Gets the route values.
            </summary>
            <value>The route values.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.PreservedRouteParameters">
            <summary>
            Gets the preserved route parameter names (= values that will be used from the current request route).
            </summary>
            <value>The preserved route parameters.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.AreRouteParametersPreserved">
            <summary>
            Flag to ensure the route values are only preserved from the current request a single time.
            </summary>
            <returns><c>true</c> if the route values have been preserved for the current request; otherwise <c>false</c>.</returns>
            <remarks>This property must be overridden and provide an implementation that is stored in the request cache.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Area">
            <summary>
            Gets or sets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Controller">
            <summary>
            Gets or sets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="P:MvcSiteMapProvider.SiteMapNode.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="M:MvcSiteMapProvider.LockableSiteMapNode.ResolveUrl">
            <summary>
            Sets the ResolvedUrl using the current Url or Url resolver.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Order">
            <summary>
            Gets or sets the display sort order for the node relative to its sibling nodes.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.HttpMethod">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Title">
            <summary>
            Gets or sets the title (optional).
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Description">
            <summary>
            Gets or sets the description (optional).
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.TargetFrame">
            <summary>
            Gets or sets the target frame (optional).
            </summary>
            <value>The target frame.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.ImageUrl">
            <summary>
            Gets or sets the image URL (optional).
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.ImageUrlProtocol">
            <summary>
            Gets or sets the image URL protocol, such as http, https (optional).
            If not provided, it will default to the protocol of the current request.
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.ImageUrlHostName">
            <summary>
            Gets or sets the image URL host name, such as www.somewhere.com (optional).
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.LastModifiedDate">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified date.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.ChangeFrequency">
            <summary>
            Gets or sets the change frequency.
            </summary>
            <value>The change frequency.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.UpdatePriority">
            <summary>
            Gets or sets the update priority.
            </summary>
            <value>The update priority.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.VisibilityProvider">
            <summary>
            Gets or sets the name or the type of the visibility provider.
            This value will be used to select the concrete type of provider to use to determine
            visibility.
            </summary>
            <value>
            The name or type of the visibility provider.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.DynamicNodeProvider">
            <summary>
            Gets or sets the name or type of the Dynamic Node Provider.
            </summary>
            <value>
            The name or type of the Dynamic Node Provider.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Clickable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MvcSiteMapProvider.SiteMapNode"/> is clickable.
            </summary>
            <value>
              <c>true</c> if clickable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.UrlResolver">
            <summary>
            Gets or sets the name or type of the URL resolver.
            </summary>
            <value>
            The name or type of the URL resolver.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.CacheResolvedUrl">
            <summary>
            A value indicating to cache the resolved URL. If false, the URL will be 
            resolved every time it is accessed.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.IncludeAmbientValuesInUrl">
            <summary>
            Gets or sets a value indicating whether to include ambient request values 
            (from the RouteValues and/or query string) when resolving URLs.
            </summary>
            <value><b>true</b> to include ambient values (like MVC does); otherwise <b>false</b>.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Protocol">
            <summary>
            Gets or sets the protocol, such as http or https that will 
            be built into the URL.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.HostName">
            <summary>
            Gets or sets the host name that will be built into the URL.
            </summary>
            <value>The host name.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.CanonicalKey">
            <summary>
            Gets or sets the canonical key. The key is used to reference another <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> to get the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalUrl; only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.CanonicalUrl">
            <summary>
            Gets or sets the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalKey; only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.CanonicalUrlProtocol">
            <summary>
            Gets or sets the canonical URL protocol, such as http, https (optional).
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.CanonicalUrlHostName">
            <summary>
            Gets or sets the canonical URL host name, such as www.somewhere.com (optional).
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Route">
            <summary>
            Gets or sets the route.
            </summary>
            <value>The route.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Area">
            <summary>
            Gets or sets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Controller">
            <summary>
            Gets or sets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="P:MvcSiteMapProvider.LockableSiteMapNode.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.LockableSiteMapNodeCollection">
            <summary>
            Provides the means to make the <see cref="T:MvcSiteMapProvider.ISiteMapNodeCollection"/> instance read-only so it cannot be 
            inadvertently altered while it is in the cache.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.ISiteMapNodeCollection">
            <summary>
            Contract for specialized collection that manages relationships between <see cref="T:MvcSiteMapNode.ISiteMapNode"/>
            instances.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.ReadOnlySiteMapNodeCollection">
            <summary>
            A specialized collection that provides a read-only wrapper for a <see cref="T:MvcSiteMapProvider.ISiteMapNodeCollection"/>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.RequestCacheableSiteMap">
            <summary>
            Provides overrides of the <see cref="T:MvcSiteMapProvider.SiteMap"/> that track the return values of specific 
            resource-intensive members in case they are accessed more than one time during a single request.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.RequestCacheableSiteMapNode">
            <summary>
            Provides overrides of the <see cref="T:MvcSiteMapProvider.SiteMapNode"/> that track the return values of specific 
            resource-intensive members in case they are accessed more than one time during a single request. Also stores 
            values set from specific read-write properties in the request cache for later retrieval.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapNodeChildStateFactory">
            <summary>
            Abstract factory for creating new instances of types required by the <see cref="T:MvcSiteMapProvider.SiteMapNode"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.SiteMapNodeCollection">
            <summary>
            A specialized collection that manages relationships between <see cref="T:MvcSiteMapNode.ISiteMapNode"/>
            instances.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.DynamicNodeProviderBase">
            <summary>
            DynamicNodeProviderBase class
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.IDynamicNodeProvider">
            <summary>
            IDynamicNodeProvider contract.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.IDynamicNodeProvider.GetDynamicNodeCollection(MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Gets the dynamic node collection.
            </summary>
            <param name="node">The current node.</param>
            <returns>A dynamic node collection.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.IDynamicNodeProvider.AppliesTo(System.String)">
            <summary>
            Determines whether the provider instance matches the name
            </summary>
            <param name="providerName">The name of the dynamic node provider. This can be any string, but for backward compatibility the type name can be used.</param>
            <returns>
            True if the provider name matches.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.DynamicNodeProviderBase.GetDynamicNodeCollection(MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Gets the dynamic node collection.
            </summary>
            <param name="node">The current node.</param>
            <returns>A dynamic node collection.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.DynamicNodeProviderBase.AppliesTo(System.String)">
            <summary>
            Determines whether the provider instance matches the name
            </summary>
            <param name="providerName">The name of the dynamic node provider. This can be any string, but for backward compatibility the type name is used.</param>
            <returns>
            True if the provider name matches.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.DynamicNodeProviderStrategy">
            <summary>
            Tracks all of the registered instances of <see cref="T:MvcSiteMapProvider.IDynamicNodeProvider"/> and 
            allows the caller to get a specific named instance of <see cref="T:MvcSiteMapProvider.IDynamicNodeProvider"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.IDynamicNodeProviderStrategy">
            <summary>
            Provides a means to yield control of the lifetime of provider
            instances to the DI container, while allowing the right instance
            for the job to be selected at runtime.
            
            http://stackoverflow.com/questions/1499442/best-way-to-use-structuremap-to-implement-strategy-pattern#1501517
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.IMvcSiteMapNodeAttribute">
            <summary>
            SiteMap node attribute contract
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Key">
            <summary>
            SiteMap node key
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.ParentKey">
            <summary>
            SiteMap node parent key
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Order">
            <summary>
            Used for ordering nodes
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.HttpMethod">
            <summary>
            Gets or sets the HTTP method (such as GET, POST, or HEAD) to use to determine
            node accessibility.
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.ResourceKey">
            <summary>
            Resource key, used when working with localization
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Title">
            <summary>
            SiteMap node title
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Description">
            <summary>
            SiteMap node description
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.TargetFrame">
            <summary>
            Gets or sets the target frame.
            </summary>
            <value>The target frame.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.ImageUrl">
            <summary>
            Gets or sets the image URL.
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.ImageUrlProtocol">
            <summary>
            Gets or sets the protocol to use when resolving the image URL.
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.ImageUrlHostName">
            <summary>
            Gets or sets the host name to use when resolving the image URL.
            </summary>
            <value>The host name of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Attributes">
            <summary>
            Gets or sets the attributes (optional).
            
            The value must be a JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).
            </summary>
            <value>A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Roles">
            <summary>
            Gets or sets the roles that may access the SiteMap node.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.LastModifiedDate">
            <summary>
            Gets or sets a string representation of the last modified date.
            
            The value may be any date format supported by the invariant culture.
            </summary>
            <value>A string representation of the last modified date. May be any date format that is supported by the invariant culture.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.ChangeFrequency">
            <summary>
            Gets or sets the change frequency.
            </summary>
            <value>The change frequency.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.UpdatePriority">
            <summary>
            Gets or sets the update priority.
            </summary>
            <value>The update priority.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.VisibilityProvider">
            <summary>
            Gets or sets the visibility provider.
            </summary>
            <value>The visibility provider.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.DynamicNodeProvider">
            <summary>
            Gets or sets the dynamic node provider.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Clickable">
            <summary>
            Is it a clickable node?
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.UrlResolver">
            <summary>
            Gets or sets the site map node URL resolver.
            </summary>
            <value>The site map node URL resolver.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Url">
            <summary>
            SiteMap node URL (optional)
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.CacheResolvedUrl">
            <summary>
            A value indicating to cache the resolved URL. If false, the URL will be 
            resolved every time it is accessed.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.IncludeAmbientValuesInUrl">
            <summary>
            Gets or sets a value indicating whether to include ambient request values 
            (from the RouteValues and/or query string) when resolving URLs.
            </summary>
            <value><b>true</b> to include ambient values (like MVC does); otherwise <b>false</b>.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Protocol">
            <summary>
            Gets or sets the protocol (such as http or https) that will be used when resolving the URL.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.HostName">
            <summary>
            Gets or sets the host name (such as www.mysite.com) that will be used when resolving the URL.
            </summary>
            <value>The host name.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.CanonicalKey">
            <summary>
            Gets or sets the canonical key. The key is used to reference another ISiteMapNode to get the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalUrl. Only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.CanonicalUrl">
            <summary>
            Gets or sets the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalKey. Only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.CanonicalUrlProtocol">
            <summary>
            Gets or sets the protocol that will be used when resolving the canonical URL.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.CanonicalUrlHostName">
            <summary>
            Gets or sets the host name that will be used when resolving the canonical URL.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.MetaRobotsValues">
            <summary>
            Gets or sets the robots meta values.
            </summary>
            <value>The robots meta values.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Route">
            <summary>
            SiteMap node route (auto-detected by default)
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.PreservedRouteParameters">
            <summary>
            Gets or sets the preserved route parameter names (= values that will be used from the current request route).
            </summary>
            <value>
            The preserved route parameter names.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.Area">
            <summary>
            Gets or sets the name of the area.
            </summary>
            <value>The name of the area.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.AreaName">
            <summary>
            Gets or sets the name of the area.
            </summary>
            <value>The name of the area.</value>
        </member>
        <member name="P:MvcSiteMapProvider.IMvcSiteMapNodeAttribute.SiteMapCacheKey">
            <summary>
            Gets or sets the name of the cache key this node is associated with.
            </summary>
            <value>The SiteMap cache key.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary">
            <summary>
            Contract of specialized dictionary for providing business logic that manages
            the behavior of the route values.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a new element to the dictionary with the specified key and value. If the key exists, the value will be overwritten.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)">
            <summary>
            Adds a new element to the dictionary with the values specified in the KeyValuePair. If the key exists, the value will be overwritten.
            </summary>
            <param name="item">The KeyValuePair object that contains the key and value to add.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the elements from a <see cref="T:System.Collections.Generic.IDictionary{string, object}"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IDictionary{string, object}"/> of items to add.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds the elements from a <see cref="T:System.Collections.Generic.IDictionary{string, object}"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IDictionary{string, object}"/> of items to add.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.AddRange(System.String)">
            <summary>
            Adds the elements from a JSON string representing the attributes. If the key exists, the value will be overwritten.
            </summary>
            <param name="jsonString">A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.AddRange(System.String,System.Boolean)">
            <summary>
            Adds the elements from a JSON string representing the attributes. If the key exists, the value will be overwritten.
            </summary>
            <param name="jsonString">A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.AddRange(System.Xml.Linq.XElement)">
            <summary>
            Adds the elements from a given <see cref="T:System.Xml.Linq.XElement"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="xmlNode">The <see cref="T:System.Xml.Linq.XElement"/> that represents the siteMapNode element in XML.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.AddRange(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Adds the elements from a given <see cref="T:System.Xml.Linq.XElement"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="xmlNode">The <see cref="T:System.Xml.Linq.XElement"/> that represents the siteMapNode element in XML.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.AddRange(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the elements from a given <see cref="T:System.Collections.Specialized.NameValueCollection"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to retrieve the values from.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.AddRange(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Adds the elements from a given <see cref="T:System.Collections.Specialized.NameValueCollection"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to retrieve the values from.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.MatchesRoute(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Compares whether the current dictionary the same as the passed in dictionary, accounting for empty optional values.
            </summary>
            <param name="routeValues">An <see cref="T:System.Collections.Generic.IDictionary{string, object}"/> that represents the routes, 
            typically from the current request context.</param>
            <returns><b>True</b> if the keys and values are an exact match (case insensitive) of of the routeValues that are passed and 
            the every member of the action method parameter list is a key in the dictionary; otherwise <b>false</b>.</returns>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary.ContainsCustomKeys">
            <summary>
            <b>True</b> if the dictionary contains keys other than "area", "controller", and "action"; otherwise <b>false</b>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionaryFactory">
            <summary>
            Contract for an abstract factory that creates new instances of 
            <see cref="T:MvcSiteMapProvider.Collections.Specialized.IRouteValueDictionary"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapFactory">
            <summary>
            Contract for an abstract factory that creates new instances of <see cref="T:MvcSiteMapProvider.ISiteMapFactory"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapNodeFactory">
            <summary>
            Contract for an abstract factory that creates new instances of <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.UrlResolver.ISiteMapNodeUrlResolverStrategy">
            <summary>
            Provides a means to yield control of the lifetime of provider
            instances to the DI container, while allowing the right instance
            for the job to be selected at runtime.
            
            http://stackoverflow.com/questions/1499442/best-way-to-use-structuremap-to-implement-strategy-pattern#1501517
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlResolver.ISiteMapNodeUrlResolverStrategy.ResolveUrl(System.String,MvcSiteMapProvider.ISiteMapNode,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves the URL.
            </summary>
            <param name="providerName">The name or type of the provider.</param>
            <param name="node">The site map node.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="routeValues">The route values.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.ISiteMapNodeVisibilityProviderStrategy">
            <summary>
            Provides a means to yield control of the lifetime of provider
            instances to the DI container, while allowing the right instance
            for the job to be selected at runtime.
            
            http://stackoverflow.com/questions/1499442/best-way-to-use-structuremap-to-implement-strategy-pattern#1501517
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.ISiteMapNodeVisibilityProviderStrategy.IsVisible(System.String,MvcSiteMapProvider.ISiteMapNode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Determines whether the node is visible.
            </summary>
            <param name="node">The node.</param>
            <param name="sourceMetadata">The source metadata.</param>
            <returns>
            	<c>true</c> if the specified node is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.MvcSiteMapNodeAttribute">
            <summary>
            SiteMap node attribute, used to decorate action methods with SiteMap node metadata
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.MvcSiteMapNodeAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Key">
            <summary>
            SiteMap node key
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.ParentKey">
            <summary>
            SiteMap node parent key
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Order">
            <summary>
            Gets or sets the sort order of this node relative to all other nodes.
            This value is used both for determining which order parent-child relationships are processed 
            as well as for how the node is displayed in the HTML helper controls.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.HttpMethod">
            <summary>
            Gets or sets the HTTP method (such as GET, POST, or HEAD) to use to determine
            node accessibility.
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.ResourceKey">
            <summary>
            Resource key, used when working with localization
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Title">
            <summary>
            SiteMap node title
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Description">
            <summary>
            SiteMap node description
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.TargetFrame">
            <summary>
            Gets or sets the target frame.
            </summary>
            <value>The target frame.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.ImageUrl">
            <summary>
            Gets or sets the image URL.
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.ImageUrlProtocol">
            <summary>
            Gets or sets the protocol to use when resolving the image URL.
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.ImageUrlHostName">
            <summary>
            Gets or sets the host name to use when resolving the image URL.
            </summary>
            <value>The host name of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Attributes">
            <summary>
            Gets or sets the attributes (optional).
            
            The value must be a JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).
            </summary>
            <value>A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Roles">
            <summary>
            Gets or sets the roles that may access the SiteMap node.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.LastModifiedDate">
            <summary>
            Gets or sets a string representation of the last modified date.
            
            The value may be any date format supported by the invariant culture.
            </summary>
            <value>A string representation of the last modified date. May be any date format that is supported by the invariant culture.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.ChangeFrequency">
            <summary>
            Gets or sets the change frequency.
            </summary>
            <value>The change frequency.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.UpdatePriority">
            <summary>
            Gets or sets the update priority.
            </summary>
            <value>The update priority.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.VisibilityProvider">
            <summary>
            Gets or sets the visibility provider.
            </summary>
            <value>The visibility provider.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.DynamicNodeProvider">
            <summary>
            Dynamic node provider
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Clickable">
            <summary>
            Is it a clickable node?
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.UrlResolver">
            <summary>
            Gets or sets the site map node URL resolver.
            </summary>
            <value>The site map node URL resolver.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Url">
            <summary>
            SiteMap node URL (optional)
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.CacheResolvedUrl">
            <summary>
            A value indicating to cache the resolved URL. If false, the URL will be 
            resolved every time it is accessed.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.IncludeAmbientValuesInUrl">
            <summary>
            Gets or sets a value indicating whether to include ambient request values 
            (from the RouteValues and/or query string) when resolving URLs.
            </summary>
            <value><b>true</b> to include ambient values (like MVC does); otherwise <b>false</b>.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Protocol">
            <summary>
            Gets or sets the protocol (such as http or https) that will be used when resolving the URL.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.HostName">
            <summary>
            Gets or sets the host name (such as www.mysite.com) that will be used when resolving the URL.
            </summary>
            <value>The host name.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.CanonicalKey">
            <summary>
            Gets or sets the canonical key. The key is used to reference another ISiteMapNode to get the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalUrl. Only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.CanonicalUrl">
            <summary>
            Gets or sets the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalKey. Only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.CanonicalUrlProtocol">
            <summary>
            Gets or sets the protocol that will be used when resolving the canonical URL.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.CanonicalUrlHostName">
            <summary>
            Gets or sets the host name that will be used when resolving the canonical URL.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.MetaRobotsValues">
            <summary>
            Gets or sets the robots meta values.
            </summary>
            <value>The robots meta values.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Route">
            <summary>
            SiteMap node route (auto-detected by default)
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.PreservedRouteParameters">
            <summary>
            Gets or sets the preserved route parameter names (= values that will be used from the current request route).
            </summary>
            <value>
            The preserved route parameter names.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.Area">
            <summary>
            Gets or sets the name of the area.
            </summary>
            <value>The name of the area.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.AreaName">
            <summary>
            Gets or sets the name of the area.
            </summary>
            <value>The name of the area.</value>
        </member>
        <member name="P:MvcSiteMapProvider.MvcSiteMapNodeAttribute.SiteMapCacheKey">
            <summary>
            Gets or sets the name of the cache key this node is associated with
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary">
            <summary>
            Specialized dictionary for providing business logic that manages
            the behavior of the route values.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.Add(System.String,System.Object)">
            <summary>
            Adds a new element to the dictionary with the specified key and value. If the key exists, the value will be overwritten.
            </summary>
            <param name="key">The key of the new item to add.</param>
            <param name="value">The value of the new item to add.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds a new element to the dictionary with the values specified in the KeyValuePair. If the key exists, the value will be overwritten.
            </summary>
            <param name="item">The KeyValuePair object that contains the key and value to add.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)">
            <summary>
            Adds a new element to the dictionary with the values specified in the KeyValuePair. If the key exists, the value will be overwritten.
            </summary>
            <param name="item">The KeyValuePair object that contains the key and value to add.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a new element to the dictionary with the specified key and value. If the key exists, the value will be overwritten.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the elements from a <see cref="T:System.Collections.Generic.IDictionary{string, object}"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IDictionary{string, object}"/> of items to add.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds the elements from a <see cref="T:System.Collections.Generic.IDictionary{string, object}"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IDictionary{string, object}"/> of items to add.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.AddRange(System.String)">
            <summary>
            Adds the elements from a JSON string representing the attributes. If the key exists, the value will be overwritten.
            </summary>
            <param name="jsonString">A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.AddRange(System.String,System.Boolean)">
            <summary>
            Adds the elements from a JSON string representing the attributes. If the key exists, the value will be overwritten.
            </summary>
            <param name="jsonString">A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.AddRange(System.Xml.Linq.XElement)">
            <summary>
            Adds the elements from a given <see cref="T:System.Xml.Linq.XElement"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="xmlNode">The <see cref="T:System.Xml.Linq.XElement"/> that represents the siteMapNode element in XML.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.AddRange(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Adds the elements from a given <see cref="T:System.Xml.Linq.XElement"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="xmlNode">The <see cref="T:System.Xml.Linq.XElement"/> that represents the siteMapNode element in XML.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.AddRange(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the elements from a given <see cref="T:System.Collections.Specialized.NameValueCollection"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to retrieve the values from.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.AddRange(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Adds the elements from a given <see cref="T:System.Collections.Specialized.NameValueCollection"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to retrieve the values from.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary.ContainsCustomKeys">
            <summary>
            <b>True</b> if the dictionary contains keys other than "area", "controller", and "action"; otherwise <b>false</b>.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionaryFactory">
            <summary>
            An abstract factory that can be used to create new instances of 
            <see cref="T:MvcSiteMapProvider.Collections.Specialized.RouteValueDictionary"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.RequestCacheableSiteMap"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary">
            <summary>
            A specialized dictionary that contains the business logic for handling the attributes collection including
            localization of custom attributes.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.Add(System.String,System.Object)">
            <summary>
            Adds a new element to the dictionary with the specified key and value. If the key exists, the value will be overwritten.
            </summary>
            <param name="key">The key of the new item to add.</param>
            <param name="value">The value of the new item to add.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds a new element to the dictionary with the values specified in the KeyValuePair. If the key exists, the value will be overwritten.
            </summary>
            <param name="item">The KeyValuePair object that contains the key and value to add.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)">
            <summary>
            Adds a new element to the dictionary with the values specified in the KeyValuePair. If the key exists, the value will be overwritten.
            </summary>
            <param name="item">The KeyValuePair object that contains the key and value to add.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a new element to the dictionary with the specified key and value. If the key exists, the value will be overwritten.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the elements from a <see cref="T:System.Collections.Generic.Dictionary{string, object}"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.Dictionary{string, object}"/> of items to add.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds the elements from a <see cref="T:System.Collections.Generic.Dictionary{string, object}"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.Dictionary{string, object}"/> of items to add.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.AddRange(System.String)">
            <summary>
            Adds the elements from a JSON string representing the attributes. If the key exists, the value will be overwritten.
            </summary>
            <param name="jsonString">A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.AddRange(System.String,System.Boolean)">
            <summary>
            Adds the elements from a JSON string representing the attributes. If the key exists, the value will be overwritten.
            </summary>
            <param name="jsonString">A JSON string that represents a dictionary of key-value pairs. Example: @"{ ""key-1"": ""value-1""[, ""key-x"": ""value-x""] }". 
            The value may be a string or primitive type (by leaving off the quotes).</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.AddRange(System.Xml.Linq.XElement)">
            <summary>
            Adds the elements from a given <see cref="T:System.Xml.Linq.XElement"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="xmlNode">The <see cref="T:System.Xml.Linq.XElement"/> that represents the siteMapNode element in XML.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.AddRange(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Adds the elements from a given <see cref="T:System.Xml.Linq.XElement"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="xmlNode">The <see cref="T:System.Xml.Linq.XElement"/> that represents the siteMapNode element in XML.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.AddRange(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the elements from a given <see cref="T:System.Collections.Specialized.NameValueCollection"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to retrieve the values from.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Collections.Specialized.AttributeDictionary.AddRange(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Adds the elements from a given <see cref="T:System.Collections.Specialized.NameValueCollection"/>. If the key exists, the value will be overwritten.
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to retrieve the values from.</param>
            <param name="throwIfReservedKey"><c>true</c> to throw an exception if one of the keys being added is a reserved key name; otherwise, <c>false</c>.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Collections.Specialized.SiteMapNodeCollectionFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.ISiteMapNodeCollection"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapNodeFactory">
            <summary>
            An abstract factory that can be used to create new instances of <see cref="T:MvcSiteMapProvider.RequestCacheableSiteMapNode"/>
            at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.UrlResolver.SiteMapNodeUrlResolverStrategy">
            <summary>
            Tracks all of the registered instances of <see cref="T:MvcSiteMapProvider.Web.UrlResolver.ISiteMapNodeUrlResolver"/> and 
            allows the caller to get a specific named instance of <see cref="T:MvcSiteMapProvider.Web.UrlResolver.ISiteMapNodeUrlResolver"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMapNodeVisibilityProviderStrategy">
            <summary>
            Tracks all of the registered instances of <see cref="T:MvcSiteMapProvider.ISiteMapNodeVisiblityProvider"/> and 
            allows the caller to get a specific named instance of <see cref="T:MvcSiteMapProvider.ISiteMapNodeVisiblityProvider"/> at runtime.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.SiteMaps">
            <summary>
            This class is the static entry point where the presentation layer can request a sitemap by calling Current or passing a siteMapCacheKey.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngine">
            <summary>
            MvcSiteMapProviderViewEngine class
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngine.#cctor">
            <summary>
            Initializes the <see cref="T:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngine"/> class.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngine.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngine"/> class.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            Creates the specified partial view by using the specified controller context.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="partialPath">The partial path for the new partial view.</param>
            <returns>A reference to the partial view.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
            <summary>
            Creates the specified view by using the controller context, path of the view, and path of the master view.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="viewPath">The path of the view.</param>
            <param name="masterPath">The path of the master view.</param>
            <returns>A reference to the view.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualFile">
            <summary>
            MvcSiteMapProviderViewEngineVirtualFile class.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualFile"/> class.
            </summary>
            <param name="filePath">The filePath.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualFile.Open">
            <summary>
            When overridden in a derived class, returns a read-only stream to the virtual resource.
            </summary>
            <returns>A read-only stream to the virtual file.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualFile.ReadResource(System.String)">
            <summary>
            Reads the resource.
            </summary>
            <param name="embeddedFileName">Name of the embedded file.</param>
            <returns></returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualFile.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualPathProvider">
            <summary>
            MvcSiteMapProviderViewEnginePathProvider class
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualPathProvider.PathExists(System.String)">
            <summary>
            Check if a path exists in the virtual file system.
            </summary>
            <param name="path">The path.</param>
            <returns>true if the path exists in the virtual file system; otherwise, false.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualPathProvider.FileExists(System.String)">
            <summary>
            Gets a value that indicates whether a file exists in the virtual file system.
            </summary>
            <param name="virtualPath">The path to the virtual file.</param>
            <returns>
            true if the file exists in the virtual file system; otherwise, false.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualPathProvider.GetFile(System.String)">
            <summary>
            Gets a virtual file from the virtual file system.
            </summary>
            <param name="virtualPath">The path to the virtual file.</param>
            <returns>
            A descendent of the <see cref="T:System.Web.Hosting.VirtualFile"/> class that represents a file in the virtual file system.
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.MvcSiteMapProviderViewEngineVirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            Creates a cache dependency based on the specified virtual paths.
            </summary>
            <param name="virtualPath">The path to the primary virtual resource.</param>
            <param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource.</param>
            <param name="utcStart">The UTC time at which the virtual resources were read.</param>
            <returns>
            A <see cref="T:System.Web.Caching.CacheDependency"/> object for the specified virtual resources.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.UnknownSiteMapException">
            <summary>
            UnknownSiteMapException
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.UnknownSiteMapException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.UnknownSiteMapException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:MvcSiteMapProvider.UnknownSiteMapException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.HtmlHelperExtensions">
            <summary>
            HtmlHelperExtensions class
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.HtmlHelperExtensions.MvcSiteMap(System.Web.Mvc.HtmlHelper)">
            <summary>
            Creates a new MvcSiteMapProvider HtmlHelper.
            </summary>
            <param name="helper">The helper.</param>
            <returns>
            A <see cref="T:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper"/> instance 
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.HtmlHelperExtensions.MvcSiteMap(System.Web.Mvc.HtmlHelper,MvcSiteMapProvider.ISiteMap)">
            <summary>
            Creates a new MvcSiteMapProvider HtmlHelper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="siteMap">The SiteMap.</param>
            <returns>
            A <see cref="T:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper"/> instance
            </returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.HtmlHelperExtensions.MvcSiteMap(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a new MvcSiteMapProvider HtmlHelper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="siteMapCacheKey">The SiteMap Cache Key.</param>
            <returns>
            A <see cref="T:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper"/> instance
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.MenuHelper">
            <summary>
            MvcSiteMapHtmlHelper extension methods
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,System.Boolean,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Int32,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Int32,System.Boolean,System.Boolean,System.Int32,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startFromCurrentNode">Start from current node if set to <c>true</c>.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Int32)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Int32,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="visibilityAffectsDescendants"><c>true</c> if the visibility provider should affect the visibility of descendant nodes, otherwise <c>false</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="visibilityAffectsDescendants"><c>true</c> if the visibility provider should affect the visibility of descendant nodes, otherwise <c>false</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.Menu(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a menu, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Show starting node in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="visibilityAffectsDescendants"><c>true</c> if the visibility provider should affect the visibility of descendant nodes, otherwise <c>false</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.BuildModel(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Builds the model.
            </summary>
            <param name="helper">The helper.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node?</param>
            <param name="visibilityAffectsDescendants"><b>true</b> if the visibility provider should affect the current node as well as all descendant nodes; otherwise <b>false</b>.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.BuildModel(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Builds the model.
            </summary>
            <param name="helper">The helper.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="showStartingNode">Show starting node if set to <c>true</c>.</param>
            <param name="maxDepth">The max depth.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.GetCurrentNode(MvcSiteMapProvider.ISiteMap)">
            <summary>
            This determines the deepest node matching the current HTTP context, so if the current URL describes a location
            deeper than the site map designates, it will determine the closest parent to the current URL and return that 
            as the current node. This allows menu relevance when navigating deeper than the sitemap structure designates, such
            as when navigating to MVC actions, which are not shown in the menus
            </summary>
            <param name="selectedSiteMap">The current SiteMap.</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.GetCurrentNode(MvcSiteMapProvider.ISiteMap,System.Boolean)">
            <summary>
            This determines the deepest node matching the current HTTP context, so if the current URL describes a location
            deeper than the site map designates, it will determine the closest parent to the current URL and return that 
            as the current node. This allows menu relevance when navigating deeper than the sitemap structure designates, such
            as when navigating to MVC actions, which are not shown in the menus
            </summary>
            <param name="selectedSiteMap">The current SiteMap.</param>
            <param name="returnRootNodeIfNotFound">Whether to return the root node if the current node is null</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.GetStartingNode(MvcSiteMapProvider.ISiteMapNode,System.Int32,System.Boolean)">
            <summary>
            Gets the starting node.
            </summary>
            <param name="currentNode">The current node.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <returns>The starting node.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.GetStartingNode(MvcSiteMapProvider.ISiteMapNode,System.Int32)">
            <summary>
            Gets the starting node.
            </summary>
            <param name="currentNode">The current node.</param>
            <param name="startingNodeLevel">The starting node level.</param>
            <returns>The starting node.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.GetNodeAtLevel(MvcSiteMapProvider.ISiteMapNode,System.Int32,System.Boolean)">
            <summary>
            Gets the node at level.
            </summary>
            <param name="startingNode">The starting node.</param>
            <param name="level">The level.</param>
            <param name="allowForwardSearch">if set to <c>true</c> allow forward search. Forward search will search all parent nodes and child nodes, where in other circumstances only parent nodes are searched.</param>
            <returns>The node at level.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MenuHelper.GetSourceMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the source meta data for the current context.
            </summary>
            <param name="sourceMetadata">User-defined metadata.</param>
            <returns>SourceMetadataDictionary for the current request.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.Models.MenuHelperModel">
            <summary>
            MenuHelperModel
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.MenuHelperModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Html.Models.MenuHelperModel"/> class.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.MenuHelperModel.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.MenuHelperModel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.MenuHelperModel.Nodes">
            <summary>
            Gets or sets the nodes.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.Models.SiteMapHelperModel">
            <summary>
            SiteMapHelperModel
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapHelperModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Html.Models.SiteMapHelperModel"/> class.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapHelperModel.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapHelperModel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapHelperModel.Nodes">
            <summary>
            Gets or sets the nodes.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel">
            <summary>
            SiteMapNodeModel
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.#ctor(MvcSiteMapProvider.ISiteMapNode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="sourceMetadata">The source metadata provided by the HtmlHelper.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.#ctor(MvcSiteMapProvider.ISiteMapNode,System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="sourceMetadata">The source metadata provided by the HtmlHelper.</param>
            <param name="maxDepth">The max depth.</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <param name="startingNodeInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.ReachedMaximalNodelevel(System.Int32,MvcSiteMapProvider.ISiteMapNode,System.Boolean)">
            <summary>
            Test if the maximal node level has not been reached
            </summary>
            <param name="maxDepth">The normal max depth.</param>
            <param name="node">The starting node</param>
            <param name="drillDownToCurrent">Should the model exceed the maxDepth to reach the current node</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.GetDescendants(MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel)">
            <summary>
            Retrieve all descendants    
            </summary>
            <param name="node">the node</param>
            <returns></returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.GetAncestors(MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel)">
            <summary>
            Retrieve all ancestors  
            </summary>
            <param name="node">the node</param>
            <returns></returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Area">
            <summary>
            Gets or sets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Controller">
            <summary>
            Gets or sets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.CanonicalUrl">
            <summary>
            Gets or sets the canonical URL.
            </summary>
            <value>The canonical URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.MetaRobotsContent">
            <summary>
            Gets or sets the content value of the meta robots tag.
            </summary>
            <value>The content value of the meta robots tag.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.TargetFrame">
            <summary>
            Gets or sets the target frame.
            </summary>
            <value>The target frame.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.ImageUrl">
            <summary>
            Gets or sets the image URL.
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.IsCurrentNode">
            <summary>
            Gets or sets a value indicating whether this instance is current node.
            </summary>
            <value>
            	<c>true</c> if this instance is current node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.IsInCurrentPath">
            <summary>
            Gets or sets a value indicating whether this instance is in current path.
            </summary>
            <value>
            	<c>true</c> if this instance is in current path; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.IsRootNode">
            <summary>
            Gets or sets a value indicating whether this instance is root node.
            </summary>
            <value>
            	<c>true</c> if this instance is root node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.IsClickable">
            <summary>
            Gets or sets a value indicating whether this instance is clickable.
            </summary>
            <value>
            	<c>true</c> if this instance is clickable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.VisibilityAffectsDescendants">
            <summary>
            Gets or sets a value indicating whether the visibility property of the current node
            will affect the descendant nodes.
            </summary>
            <value>
            	<c>true</c> if visibility should affect descendants; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.RouteValues">
            <summary>
            Gets or sets the route values.
            </summary>
            <value>The route values.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Attributes">
            <summary>
            Gets or sets the meta attributes.
            </summary>
            <value>The meta attributes.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.SourceMetadata">
            <summary>
            Gets or sets the source metadata generated by the HtmlHelper.
            </summary>
            <value>The source metadata.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Order">
            <summary>
            Gets the order of the node relative to its sibling nodes.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Parent">
            <summary>
            Gets the parent
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Descendants">
            <summary>
            Gets the descendants.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModel.Ancestors">
            <summary>
            Gets the ancestors.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.Models.SiteMapNodeModelList">
            <summary>
            SiteMapNodeModelList
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.Models.SiteMapPathHelperModel">
            <summary>
            SiteMapPathHelperModel
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapPathHelperModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Html.Models.SiteMapPathHelperModel"/> class.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapPathHelperModel.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.Models.SiteMapPathHelperModel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapPathHelperModel.Nodes">
            <summary>
            Gets or sets the nodes.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.Models.SiteMapTitleHelperModel">
            <summary>
            SiteMapTitleHelperModel
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.Models.SiteMapTitleHelperModel.CurrentNode">
            <summary>
            Gets or sets the current node.
            </summary>
            <value>The current node.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper">
            <summary>
            MvcSiteMapHtmlHelper class
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper.#ctor(System.Web.Mvc.HtmlHelper,MvcSiteMapProvider.ISiteMap)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper"/> class.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="siteMap">The sitemap.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper.#ctor(System.Web.Mvc.HtmlHelper,MvcSiteMapProvider.ISiteMap,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper"/> class.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="siteMap">The sitemap.</param>
            <param name="useViewEngine"><c>true</c> to use the internal view engine; otherwise <c>false</c></param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper.CreateHtmlHelperForModel``1(``0)">
            <summary>
            Creates the HTML helper for model.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper.HtmlHelper">
            <summary>
            Gets or sets the HTML helper.
            </summary>
            <value>The HTML helper.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper.SiteMap">
            <summary>
            Gets or sets the sitemap.
            </summary>
            <value>The sitemap.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.SiteMapHelper">
            <summary>
            MvcSiteMapHtmlHelper extension methods
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Object)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Object)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,System.Object)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Object)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Object)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Object)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,System.Object)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Object)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.SiteMap(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Build a sitemap tree, based on the MvcSiteMap
            </summary>
            <param name="helper">The helper.</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node.</param>
            <param name="rootInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>Html markup</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.BuildModel(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary,MvcSiteMapProvider.ISiteMapNode,System.Boolean,System.Boolean)">
            <summary>
            Builds the model.
            </summary>
            <param name="helper">The helper.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <param name="startingNode">The starting node.</param>
            <param name="startingNodeInChildLevel">Renders startingNode in child level if set to <c>true</c>.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapHelper.GetSourceMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the source meta data for the current context.
            </summary>
            <param name="sourceMetadata">User-defined metadata.</param>
            <returns>SourceMetadataDictionary for the current request.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.SiteMapPathHelper">
            <summary>
            MvcSiteMapHtmlHelper extension methods
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="startingNode">The starting node (the last node in the site map path).</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Object)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Object)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.String)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeKey">The key of the starting node (the last node in the site map path).</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeKey">The key of the starting node (the last node in the site map path).</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.String,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNodeKey">The key of the starting node (the last node in the site map path).</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node (the last node in the site map path).</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,System.Object)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node (the last node in the site map path).</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.SiteMapPath(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.ISiteMapNode,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets SiteMap path for the current request
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="startingNode">The starting node (the last node in the site map path).</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>SiteMap path for the current request</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.BuildModel(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Builds the model.
            </summary>
            <param name="helper">The helper.</param>
            <param name="startingNode">The starting node.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapPathHelper.GetSourceMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the source meta data for the current context.
            </summary>
            <param name="sourceMetadata">User-defined metadata.</param>
            <returns>SourceMetadataDictionary for the current request.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Html.SiteMapTitleHelper">
            <summary>
            MvcSiteMapHtmlHelper extension methods
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapTitleHelper.SiteMapTitle(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper)">
            <summary>
            Gets the title of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <returns>The title of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapTitleHelper.SiteMapTitle(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.Object)">
            <summary>
            Gets the title of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The title of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapTitleHelper.SiteMapTitle(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets the title of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The title of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapTitleHelper.SiteMapTitle(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String)">
            <summary>
            Gets the title of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <returns>The title of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapTitleHelper.SiteMapTitle(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,System.Object)">
            <summary>
            Gets the title of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The title of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapTitleHelper.SiteMapTitle(MvcSiteMapProvider.Web.Html.MvcSiteMapHtmlHelper,System.String,MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary)">
            <summary>
            Gets the title of SiteMap.CurrentNode
            </summary>
            <param name="helper">MvcSiteMapHtmlHelper instance</param>
            <param name="templateName">Name of the template.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The title of the CurrentNode or the RootNode (if CurrentNode is null)</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapTitleHelper.BuildModel(MvcSiteMapProvider.Collections.Specialized.SourceMetadataDictionary,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Builds the model.
            </summary>
            <param name="startingNode">The starting node.</param>
            <param name="sourceMetadata">User-defined meta data.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Html.SiteMapTitleHelper.GetSourceMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the source meta data for the current context.
            </summary>
            <param name="sourceMetadata">User-defined metadata.</param>
            <returns>SourceMetadataDictionary for the current request.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.IUrlPath">
            <summary>
            Contract for a class that contains logic for dealing with URLs.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.CombineUrl(System.String[])">
            <summary>
            Combines multiple strings into a URL, fixing any problems with forward 
            and backslashes.
            </summary>
            <param name="uriParts">An array of strings to combine.</param>
            <returns>The combined URL.</returns>
            <remarks>Source: http://stackoverflow.com/questions/372865/path-combine-for-urls/6704287#6704287 </remarks>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.IsAbsoluteUrl(System.String)">
            <summary>
            Determines if the URL is an absolute or relative URL.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <returns><b>true</b> if the URL is absolute; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.IsExternalUrl(System.String,System.Web.HttpContextBase)">
            <summary>
            Determines if a URL is not part of the current application or web site.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="httpContext">The HTTP context representing the request.</param>
            <returns><b>true</b> if the URL is not part of the virtual application or is on a different host name; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.IsPublicHostName(System.String,System.Web.HttpContextBase)">
            <summary>
            Determines if the host name matches the public facing host name.
            </summary>
            <param name="hostName">The host name.</param>
            <param name="httpContext">The HTTP context representing the request.</param>
            <returns><b>true</b> if the host name matches that of the public URL; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.MakeUrlAbsolute(System.String)">
            <summary>
            Resolves the URL to an absolute URL using the HTTP protocol.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">
            Any Url including those starting with "/", "~", or protocol.
            </param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.MakeUrlAbsolute(System.String,System.String)">
            <summary>
            Resolves the URL and combines it with the specified base URL to
            make an absolute URL. Absolute URLs will be passed through unchanged.
            </summary>
            <param name="baseUrl">An absolute URL beginning with protocol.</param>
            <param name="url">
            Any Url including those starting with "/", "~", or protocol. 
            If an absolute URL is provided in this field, the baseUrl will be ignored.
            </param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.ResolveVirtualApplicationToRootRelativeUrl(System.String)">
            <summary>
            Resolves a URL that starts with a "~" into a URL that starts with the virtual
            application path. For example ~/MySite/ will resolve to /VirtualApplication/MySite/.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.ResolveUrl(System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.ResolveUrl(System.String,System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to http 
            protocol if null or empty string. To use the protocol of the current request, use *.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.ResolveUrl(System.String,System.String,System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to http 
            protocol if null or empty string. To use the protocol of the current request, use *.</param>
            <param name="hostName">The host name such as www.somewhere.com.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.ResolveUrl(System.String,System.String,System.String,System.Web.HttpContextBase)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to http 
            protocol if null or empty string. To use the protocol of the current request, use *.</param>
            <param name="hostName">The host name such as www.somewhere.com.</param>
            <param name="httpContext">The HTTP context representing the context of the request.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.ResolveContentUrl(System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.ResolveContentUrl(System.String,System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged. Uses the protocol of the request.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to protocol of the
            request to prevent errors when resolving content under https.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.ResolveContentUrl(System.String,System.String,System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged. 
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to protocol of the
            request to prevent errors when resolving content under https.</param>
            <param name="hostName">The host name such as www.somewhere.com.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.ResolveContentUrl(System.String,System.String,System.String,System.Web.HttpContextBase)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to protocol of the
            request to prevent errors when resolving content under https.</param>
            <param name="hostName">The host name such as www.somewhere.com.</param>
            <param name="httpContext">The HTTP context representing the context of the request.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.IUrlPath.GetPublicFacingUrl(System.Web.HttpContextBase)">
            <summary>
            Gets the public facing URL for the given incoming HTTP request.
            </summary>
            <param name="httpContext">The HTTP context representing the context of the request.</param>
            <returns>The URI that the outside world used to create this request.</returns>
            <remarks>Source: http://stackoverflow.com/questions/7795910/how-do-i-get-url-action-to-use-the-right-port-number#11888846 </remarks>
        </member>
        <member name="T:MvcSiteMapProvider.Web.ViewDataContainer`1">
            <summary>
            ViewDataContainer class.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:MvcSiteMapProvider.Web.ViewDataContainer`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.ViewDataContainer`1"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:MvcSiteMapProvider.Web.ViewDataContainer`1.ViewData">
            <summary>
            Gets or sets the view data dictionary.
            </summary>
            <value></value>
            <returns>The view data dictionary.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.XmlSiteMapController">
            <summary>
            XmlSiteMapController class
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapController.Index(System.Int32)">
            <summary>
            GET: /XmlSiteMap/Index
            </summary>
            <param name="page">The page.</param>
            <returns>XmlSiteMapResult instance</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapController.RegisterRoutes(System.Web.Routing.RouteCollection)">
            <summary>
            Registers the routes.
            </summary>
            <param name="routeCollection">The route collection.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult">
            <summary>
            XmlSiteMapResult class.
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.MaxNumberOfLinksPerFile">
            <summary>
            Maximal number of links per sitemap file.
            </summary>
            <remarks>
            This number should be 50000 in theory, see http://www.sitemaps.org/protocol.php#sitemapIndex_sitemap.
            Since sitemap files can be maximal 10MB per file and calculating the total sitemap size would degrade performance,
            an average cap of 35000 has been chosen.
            </remarks>
        </member>
        <member name="F:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.SourceMetadata">
            <summary>
            Source metadata
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.ExecuteSitemapIndexResult(System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{MvcSiteMapProvider.ISiteMapNode},System.Int64)">
            <summary>
            Executes the sitemap index result.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
            <param name="flattenedHierarchy">The flattened hierarchy.</param>
            <param name="flattenedHierarchyCount">The flattened hierarchy count.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.ExecuteSitemapResult(System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{MvcSiteMapProvider.ISiteMapNode},System.Int64,System.Int32)">
            <summary>
            Executes the sitemap result.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
            <param name="flattenedHierarchy">The flattened hierarchy.</param>
            <param name="flattenedHierarchyCount">The flattened hierarchy count.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.GenerateSiteMapIndexElements(System.Int32,System.String,System.String)">
            <summary>
            Generates the sitemap index elements.
            </summary>
            <param name="numPages">The number of pages.</param>
            <param name="siteMapUrlTemplate">The site map URL template.</param>
            <returns>The sitemap index elements.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.GenerateUrlElements(System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{MvcSiteMapProvider.ISiteMapNode},System.String)">
            <summary>
            Generates the URL elements.
            </summary>
            <param name="siteMapNodes">The site map nodes.</param>
            <param name="baseUrl">The base URL.</param>
            <returns>The URL elements.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.FlattenHierarchy(MvcSiteMapProvider.ISiteMapNode,System.Web.Mvc.ControllerContext,System.Boolean)">
            <summary>
            Generates flat list of SiteMapNode from SiteMap hierarchy.
            </summary>
            <param name="startingNode">The starting node.</param>
            <param name="context">The controller context.</param>
            <param name="visibilityAffectsDescendants">A boolean indicating whether visibility of the current node should affect the visibility of descendant nodes.</param>
            <returns>A flat list of SiteMapNode.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.ShouldNodeRender(MvcSiteMapProvider.ISiteMapNode,System.Web.Mvc.ControllerContext)">
            <summary>
            Checks all rules to determine if the current node should render in the sitemap.
            </summary>
            <param name="node">The node</param>
            <param name="context">The controller context</param>
            <returns><b>true</b> if the current node should be rendered; otherwise<b>false</b>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.IsCanonicalUrl(MvcSiteMapProvider.ISiteMapNode,System.Web.HttpContextBase)">
            <summary>
            Determines whether the URL of the current node is a canonical node. 
            </summary>
            <param name="node">The node</param>
            <returns><c>true</c> if the node's URL is canonical; otherwise<c>false</c>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.IsDuplicateUrl(MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Determines whether the URL is already included in the sitemap.
            </summary>
            <param name="node">The node.</param>
            <returns><b>true</b> if the URL of the node is a duplicate; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.RetrieveOutputStream(System.Web.Mvc.ControllerContext)">
            <summary>
            Retrieves the output stream.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.Ns">
            <summary>
            Gets or sets the XML namespace.
            </summary>
            <value>The XML namespace.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.RootNode">
            <summary>
            Gets or sets the root node.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.SiteMapCacheKeys">
            <summary>
            Gets or sets the site map cache keys.
            </summary>
            <value>The site map cache keys.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.BaseUrl">
            <summary>
            Gets or sets the base URL.
            </summary>
            <value>The base URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.SiteMapUrlTemplate">
            <summary>
            Gets or sets the site map URL template.
            </summary>
            <value>The site map URL template.</value>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.XmlSiteMapResult.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>The page.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.FileXmlSource">
            <summary>
            Provides an XDocument instance based on an XML file source.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.IXmlSource">
            <summary>
            Contract for providing XDocument instances from various sources.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Xml.FileXmlSource.#ctor(System.String)">
            <summary>
            Creates a new instance of FileXmlSource.
            </summary>
            <param name="fileName">The absolute path to the Xml file.</param>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.ISiteMapXmlValidator">
            <summary>
            Contract to provide an instance that can validate an XML file against an embedded XSD schema.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.ISiteMapXmlNameProvider">
            <summary>
            Contract for class that provides details of the sitemap XML element names.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.XElementExtensions">
            <summary>
            XElementExtensions class
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Xml.XElementExtensions.GetAttributeValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Given an XElement and an attribute key, will either return an empty string if its value is
            null or the actual value.
            </summary>
            <param name="node">The current node</param>
            <param name="attributeName">The attribe to get the value for.</param>
            <returns>Empty string or attribute value</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Xml.XElementExtensions.GetAttributeValueOrFallback(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Given an XElement and an attribute key, will either return a fallback value if its value is
            null or the actual value.
            </summary>
            <param name="node">The node.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="fallbackValue">The fallback value.</param>
            <returns></returns>
        </member>
        <member name="T:MvcSiteMapProvider.Builder.XmlSiteMapBuilder">
            <summary>
            XmlSiteMapBuilder class. Builds a <see cref="T:MvcSiteMapProvider.ISiteMapNode"/> tree based on a 
            <see cref="T:MvcSiteMapProvider.Xml.IXmlSource"/> instance.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.XmlSiteMapBuilder.GetSiteMapNodeFromXmlElement(MvcSiteMapProvider.ISiteMap,System.Xml.Linq.XElement,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Maps an XMLElement from the XML file to an MvcSiteMapNode.
            </summary>
            <param name="node">The element to map.</param>
            <param name="parentNode">The parent SiteMapNode</param>
            <returns>An MvcSiteMapNode which represents the XMLElement.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.XmlSiteMapBuilder.InheritAreaIfNotProvided(System.Xml.Linq.XElement,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Inherits the area from the parent node if it is not provided in the current siteMapNode XML element and the parent node is not null.
            </summary>
            <param name="node">The siteMapNode element.</param>
            <param name="parentNode">The parent node.</param>
            <returns>The value provided by either the siteMapNode or parentNode.Area.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.XmlSiteMapBuilder.InheritControllerIfNotProvided(System.Xml.Linq.XElement,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Inherits the controller from the parent node if it is not provided in the current siteMapNode XML element and the parent node is not null.
            </summary>
            <param name="node">The siteMapNode element.</param>
            <param name="parentNode">The parent node.</param>
            <returns>The value provided by either the siteMapNode or parentNode.Controller.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Builder.XmlSiteMapBuilder.ProcessXmlNodes(MvcSiteMapProvider.ISiteMap,MvcSiteMapProvider.ISiteMapNode,System.Xml.Linq.XElement)">
            <summary>
            Recursively processes our XML document, parsing our siteMapNodes and dynamicNode(s).
            </summary>
            <param name="rootNode">The main root sitemap node.</param>
            <param name="rootElement">The main root XML element.</param>
        </member>
        <member name="T:MvcSiteMapProvider.DynamicNode">
            <summary>
            DynamicNode class
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.DynamicNode.SafeCopyTo(MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Copies the values for matching properties on an <see cref="T:MvcSiteMapNodeProvider.ISiteMapNode"/> instance, but
            doesn't overwrite any values that are not set in this <see cref="T:MvcSiteMapNodeProvider.DynamicNode"/> instance.
            </summary>
            <param name="node">The site map node to copy the values into.</param>
        </member>
        <member name="M:MvcSiteMapProvider.DynamicNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.DynamicNode"/> class.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.DynamicNode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.DynamicNode"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="title">The title.</param>
        </member>
        <member name="M:MvcSiteMapProvider.DynamicNode.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.DynamicNode"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="parentKey">The parent key.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:MvcSiteMapProvider.DynamicNode.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.DynamicNode"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="parentKey">The parent key.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="controller">The controller (optional).</param>
            <param name="action">The action (optional).</param>
        </member>
        <member name="M:MvcSiteMapProvider.DynamicNode.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.DynamicNode"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="parentKey">The parent key.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="action">The action (optional).</param>
        </member>
        <member name="M:MvcSiteMapProvider.DynamicNode.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.DynamicNode"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="parentKey">The parent key.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="area">The area (optional).</param>
            <param name="controller">The controller (optional).</param>
            <param name="action">The action (optional).</param>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.ParentKey">
            <summary>
            Gets or sets the parent key (optional).
            </summary>
            <value>The parent key.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Order">
            <summary>
            Gets or sets the sort order of the node relative to its sibling nodes (the nodes that have the same parent).
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.HttpMethod">
            <summary>
            Gets or sets the HTTP method (such as GET, POST, or HEAD).
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Title">
            <summary>
            Gets or sets the title (optional).
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Description">
            <summary>
            Gets or sets the description (optional).
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.TargetFrame">
            <summary>
            Gets or sets the target frame (optional).
            </summary>
            <value>The target frame.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.ImageUrl">
            <summary>
            Gets or sets the image URL (optional).
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.ImageUrlProtocol">
            <summary>
            Gets or sets the protocol such as http or https to use when resolving the image URL.
            Defaults to the protocol of the current request if not provided.
            </summary>
            <value>The protocol of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.ImageUrlHostName">
            <summary>
            Gets or sets the host name such as www.somewhere.com to use when resolving the image URL.
            </summary>
            <value>The host name of the image URL.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Attributes">
            <summary>
            Gets or sets the attributes (optional).
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.LastModifiedDate">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified date.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.ChangeFrequency">
            <summary>
            Gets or sets the change frequency.
            </summary>
            <value>The change frequency.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.UpdatePriority">
            <summary>
            Gets or sets the update priority.
            </summary>
            <value>The update priority.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.VisibilityProvider">
            <summary>
            Gets or sets the visibility provider.
            </summary>
            <value>
            The visibility provider.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Clickable">
            <summary>
            Gets or sets whether the node is clickable or just a grouping node.
            </summary>
            <value>
            Is clickable.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.UrlResolver">
            <summary>
            Gets or sets the URL resolver.
            </summary>
            <value>
            The URL resolver.
            </value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Url">
            <summary>
            Gets or sets the Url (optional).
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.CacheResolvedUrl">
            <summary>
            A value indicating to cache the resolved URL. If false, the URL will be 
            resolved every time it is accessed.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.IncludeAmbientValuesInUrl">
            <summary>
            Gets or sets a value indicating whether to include ambient request values 
            (from the RouteValues and/or query string) when resolving URLs.
            </summary>
            <value><b>true</b> to include ambient values (like MVC does); otherwise <b>false</b>.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Protocol">
            <summary>
            Gets or sets the protocol (such as http or https) that will be used when resolving the URL.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.HostName">
            <summary>
            Gets or sets the host name (such as www.mysite.com) that will be used when resolving the URL.
            </summary>
            <value>The host name.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.CanonicalKey">
            <summary>
            Gets or sets the canonical key. The key is used to reference another ISiteMapNode to get the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalUrl. Only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.CanonicalUrl">
            <summary>
            Gets or sets the canonical URL.
            </summary>
            <remarks>May not be used in conjunction with CanonicalKey. Only 1 canonical value is allowed.</remarks>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.CanonicalUrlProtocol">
            <summary>
            Gets or sets the protocol that will be used when resolving the canonical URL.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.CanonicalUrlHostName">
            <summary>
            Gets or sets the host name that will be used when resolving the canonical URL.
            </summary>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.MetaRobotsValues">
            <summary>
            Gets or sets the robots meta values.
            </summary>
            <value>The robots meta values.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Route">
            <summary>
            Gets or sets the route.
            </summary>
            <value>The route.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.RouteValues">
            <summary>
            Gets or sets the route values.
            </summary>
            <value>The route values.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.PreservedRouteParameters">
            <summary>
            Gets or sets the preserved route parameter names (= values that will be used from the current request route).
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Area">
            <summary>
            Gets or sets the area (optional).
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Controller">
            <summary>
            Gets or sets the controller (optional).
            </summary>
            <value>The controller.</value>
        </member>
        <member name="P:MvcSiteMapProvider.DynamicNode.Action">
            <summary>
            Gets or sets the action (optional).
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.SiteMapHttpContext">
            <summary>
            HttpContext wrapper.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.SiteMapHttpContext.#ctor(System.Web.HttpContext,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Mvc.SiteMapHttpContext"/> class.
            </summary>
            <param name="httpContext">The object that this wrapper class provides access to.</param>
            <param name="node">The site map node to fake node access context for or <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="httpContext"/> is null.
            </exception>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.SiteMapHttpContext.Request">
            <summary>
            Gets the <see cref="T:System.Web.HttpRequestBase"/> object for the current HTTP request.
            </summary>
            <returns>The current HTTP request.</returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.SiteMapHttpContext.Response">
            <summary>
            Gets the <see cref="T:System.Web.HttpResponseBase"/> object for the current HTTP response.
            </summary>
            <returns>The current HTTP response.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.Mvc.SiteMapHttpRequest">
            <summary>
            HttpRequest wrapper.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.Mvc.SiteMapHttpRequest.#ctor(System.Web.HttpRequest,MvcSiteMapProvider.ISiteMapNode)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcSiteMapProvider.Web.Mvc.SiteMapHttpRequest"/> class.
            </summary>
            <param name="httpRequest">The object that this wrapper class provides access to.</param>
            <param name="node">The site map node to fake node access context for or <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="httpRequest"/> is null.
            </exception>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.SiteMapHttpRequest.AppRelativeCurrentExecutionFilePath">
            <summary>
            Gets the virtual path of the application root and makes it relative by using the tilde (~) notation for the application root (as in "~/page.aspx").
            </summary>
            <value></value>
            <returns>
            The virtual path of the application root for the current request with the tilde operator added.
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.SiteMapHttpRequest.CurrentExecutionFilePath">
            <summary>
            Gets the virtual path of the current request.
            </summary>
            <value></value>
            <returns>
            The virtual path of the page handler that is currently executing.
            </returns>
        </member>
        <member name="P:MvcSiteMapProvider.Web.Mvc.SiteMapHttpRequest.HttpMethod">
            <summary>
            Gets the HTTP data-transfer method (such as GET, POST, or HEAD) that was used by the client.
            </summary>
            <returns>
            The HTTP data-transfer method that was used by the client.
            </returns>
        </member>
        <member name="T:MvcSiteMapProvider.Web.UrlPath">
            <summary>
            Contains methods for working with URLs.
            </summary>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.CombineUrl(System.String[])">
            <summary>
            Combines multiple strings into a URL, fixing any problems with forward 
            and backslashes.
            </summary>
            <param name="uriParts">An array of strings to combine.</param>
            <returns>The combined URL.</returns>
            <remarks>Source: http://stackoverflow.com/questions/372865/path-combine-for-urls/6704287#6704287 </remarks>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.IsAbsoluteUrl(System.String)">
            <summary>
            Determines if the URL is an absolute or relative URL.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <returns><b>true</b> if the URL is absolute; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.IsExternalUrl(System.String,System.Web.HttpContextBase)">
            <summary>
            Determines if a URL is not part of the current application or web site.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="httpContext">The HTTP context representing the request.</param>
            <returns><b>true</b> if the URL is not part of the virtual application or is on a different host name; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.IsPublicHostName(System.String,System.Web.HttpContextBase)">
            <summary>
            Determines if the host name matches the public facing host name.
            </summary>
            <param name="hostName">The host name.</param>
            <param name="httpContext">The HTTP context representing the request.</param>
            <returns><b>true</b> if the host name matches that of the public URL; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.MakeUrlAbsolute(System.String)">
            <summary>
            Resolves the URL to an absolute URL using the HTTP protocol.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">
            Any Url including those starting with "/", "~", or protocol.
            </param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.MakeUrlAbsolute(System.String,System.String)">
            <summary>
            Resolves the URL and combines it with the specified base URL to
            make an absolute URL. Absolute URLs will be passed through unchanged.
            </summary>
            <param name="baseUrl">An absolute URL beginning with protocol.</param>
            <param name="url">
            Any Url including those starting with "/", "~", or protocol. 
            If an absolute URL is provided in this field, the baseUrl will be ignored.
            </param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveVirtualApplicationToRootRelativeUrl(System.String)">
            <summary>
            Resolves a URL that starts with a "~" into a URL that starts with the virtual
            application path. For example ~/MySite/ will resolve to /VirtualApplication/MySite/.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveUrl(System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveUrl(System.String,System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to http 
            protocol if null or empty string. To use the protocol of the current request, use *.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveUrl(System.String,System.String,System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to http 
            protocol if null or empty string. To use the protocol of the current request, use *.</param>
            <param name="hostName">The host name such as www.somewhere.com.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveUrl(System.String,System.String,System.String,System.Web.HttpContextBase)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged. Uses the protocol of the request.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to http 
            protocol if null or empty string. To use the protocol of the current request, use *.</param>
            <param name="hostName">The host name such as www.somewhere.com.</param>
            <param name="httpContext">The HTTP context representing the context of the request.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveContentUrl(System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveContentUrl(System.String,System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to protocol of the
            request to prevent errors when resolving content under https.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveContentUrl(System.String,System.String,System.String)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged. 
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to protocol of the
            request to prevent errors when resolving content under https.</param>
            <param name="hostName">The host name such as www.somewhere.com.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveContentUrl(System.String,System.String,System.String,System.Web.HttpContextBase)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. Defaults to protocol of the
            request to prevent errors when resolving content under https.</param>
            <param name="hostName">The host name such as www.somewhere.com.</param>
            <param name="httpContext">The HTTP context representing the context of the request.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.GenerateUrl(System.String,System.String,System.String,System.Boolean,System.Web.HttpContextBase)">
            <summary>
            Resolves a URL, similar to how it would on Control.ResolveUrl() in ASP.NET.
            If the URL begins with a "/", it will be resolved to the web root. If the 
            URL begins with a "~", it will be resolved to the virtual application root.
            Absolute URLs will be passed through unchanged.
            </summary>
            <param name="url">Any Url including those starting with "/", "~", or protocol.</param>
            <param name="protocol">The protocol such as http, https, or ftp. 
            To use the protocol of the current request, use *.</param>
            <param name="hostName">The host name such as www.somewhere.com.</param>
            <param name="defaultToHttp">
            <b>true</b> to default the protocol to http if it is null or empty string; 
            <b>false</b> to default the protocol to that of the current request.
            </param>
            <param name="httpContext">The HTTP context representing the context of the request.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.GetPublicFacingUrl(System.Web.HttpContextBase)">
            <summary>
            Gets the public facing URL for the given incoming HTTP request.
            </summary>
            <param name="httpContext">The HTTP context representing the context of the request.</param>
            <returns>The URI that the outside world used to create this request.</returns>
            <remarks>Source: http://stackoverflow.com/questions/7795910/how-do-i-get-url-action-to-use-the-right-port-number#11888846 </remarks>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveServerUrl(System.String,System.Boolean)">
            <summary>
            This method returns a fully qualified absolute server Url which includes
            the protocol, server, port in addition to the server relative Url.
            Works like Control.ResolveUrl including support for ~ syntax
            but returns an absolute URL.
            </summary>
            <remarks>See http://www.west-wind.com/Weblog/posts/154812.aspx for more information.</remarks>
            <param name="serverUrl">The server URL.</param>
            <param name="forceHttps">if true forces the url to use https</param>
            <returns>Fully qualified absolute server url.</returns>
        </member>
        <member name="M:MvcSiteMapProvider.Web.UrlPath.ResolveServerUrl(System.String)">
            <summary>
            This method returns a fully qualified absolute server Url which includes
            the protocol, server, port in addition to the server relative Url.
            It work like Page.ResolveUrl, but adds these to the beginning.
            This method is useful for generating Urls for AJAX methods
            </summary>
            <remarks>See http://www.west-wind.com/Weblog/posts/154812.aspx for more information.</remarks>
            <param name="serverUrl">The server URL.</param>
            <returns>Fully qualified absolute server url.</returns>
        </member>
        <member name="T:MvcSiteMapProvider.UpdatePriority">
            <summary>
            Sitemap update priority
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Automatic">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Critical">
            <summary>
            Critical
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_000">
            <summary>
            Absolute value (0)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_010">
            <summary>
            Absolute value (10)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_020">
            <summary>
            Absolute value (20)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_030">
            <summary>
            Absolute value (30)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_040">
            <summary>
            Absolute value (40)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_050">
            <summary>
            Absolute value (50)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_060">
            <summary>
            Absolute value (60)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_070">
            <summary>
            Absolute value (70)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_080">
            <summary>
            Absolute value (80)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_090">
            <summary>
            Absolute value (90)
            </summary>
        </member>
        <member name="F:MvcSiteMapProvider.UpdatePriority.Absolute_100">
            <summary>
            Absolute value (100)
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.SiteMapXmlValidator">
            <summary>
            Validates an XML file against an XSD schema. Throws an exception if it fails.
            </summary>
        </member>
        <member name="T:MvcSiteMapProvider.Xml.SiteMapXmlNameProvider">
            <summary>
            Class that provides details of the sitemap XML element names.
            </summary>
        </member>
    </members>
</doc>
